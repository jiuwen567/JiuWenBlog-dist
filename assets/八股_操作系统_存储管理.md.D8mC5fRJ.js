import{_ as t,c as d,o as l,a6 as i}from"./chunks/framework.DkFL-jqo.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"八股/操作系统/存储管理.md","filePath":"八股/操作系统/存储管理.md"}'),a={name:"八股/操作系统/存储管理.md"},e=i('<blockquote><p>操作系统中管理分层存储器体系的部分称为存储管理器</p></blockquote><h2 id="存储管理相关概念" tabindex="-1">存储管理相关概念 <a class="header-anchor" href="#存储管理相关概念" aria-label="Permalink to &quot;存储管理相关概念&quot;">​</a></h2><h3 id="地址空间" tabindex="-1">地址空间 <a class="header-anchor" href="#地址空间" aria-label="Permalink to &quot;地址空间&quot;">​</a></h3><p>虚地址空间：目标程序所限定的地址范围也称虚空间／ 逻辑空间。（源程序经编译，或汇编后产生的逻辑空间， 是相对于‘０’地址开始的地址的集合）</p><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241216173036531.png" alt="image-20241216173036531"></p><p>内存空间：内存中物理地址的集合。</p><p>地址重定位（地址映射）：将虚拟地址变换为内存地址的过程，也称为地址重定位。</p><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241221095502002.png" alt="image-20241221095502002"></p><h3 id="程序装入" tabindex="-1">程序装入 <a class="header-anchor" href="#程序装入" aria-label="Permalink to &quot;程序装入&quot;">​</a></h3><ol><li>绝对装入方式 <ul><li>编译程序产生绝对地址目标代码，绝对装入程序按照装入模块中的地址，将程序和数据装入内存。</li><li>编译时产生绝对地址</li><li>编译器负责地址转换</li><li>单道程序阶段，无操作系统</li></ul></li><li>可重定位方式（静态重定位） <ul><li>编译时目标模块的地址（相对地址）从0开 始。可重定位装入程序，根据内存当时的使用情况，将装入模块装入到内存中某个位置。如果装入时对目标程序的指令和数据地址变换是在装入时一次完成，为静态重定位。</li><li>装入时将逻辑地址转化为物理地址</li><li>装入程序负责地址转换</li><li>早期多道批处理系统</li></ul></li><li>动态运行时装入（动态重定位） <ul><li>动态运行时的装入程序，在把装入模块装入内存后，并不立即把装入模块中的相对地址转换为绝对地址，而把这种地址转换推迟到程序要真正执行时进行。</li><li>运行时将逻辑地址转化为物理地址</li><li>运行时才进行地址转换</li><li>现代操作系统</li></ul></li></ol><h3 id="程序的链接" tabindex="-1">程序的链接 <a class="header-anchor" href="#程序的链接" aria-label="Permalink to &quot;程序的链接&quot;">​</a></h3><blockquote><p>将经过编译或汇编后得到的一组目标模块以及它们所需要的库函数，装配成一个完整的装入模块。</p></blockquote><ul><li>静态链接 <ul><li>执行前即进行链接（包括相对地址修改，外部调用符号 改变），以后不再拆开的链接方式，链接成的完整装入模块， 运行时直接装入内存。</li></ul></li><li>装入时动态链接 <ul><li>目标模块在装入内存时，边装入边链接。</li></ul></li><li>运行时动态链接 <ul><li>目标模块的链接推迟到执行时才进行。</li></ul></li></ul><h3 id="内存保护" tabindex="-1">内存保护 <a class="header-anchor" href="#内存保护" aria-label="Permalink to &quot;内存保护&quot;">​</a></h3><ol><li>基地址-界限寄存器法（硬件） <ul><li>进程1不能访问os和其他进程的地址空间<img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241218105607251.png" alt="image-20241218105607251"></li></ul></li><li>保护键法（软件） <ul><li>为每一个被保护存储块分配一个单独的保护键，在PSW 中设置相应的保护键开关字段，对不同的进程赋予不同的开 关代码和被保护的存储块中的保护键相匹配。</li><li><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241216182238675.png" alt="image-20241216182238675"></li></ul></li></ol><h2 id="连续存储管理方式" tabindex="-1">连续存储管理方式 <a class="header-anchor" href="#连续存储管理方式" aria-label="Permalink to &quot;连续存储管理方式&quot;">​</a></h2><blockquote><p>连续分配：指为用户分配的必须是一个连续的内存空间</p></blockquote><h3 id="单一分区分配" tabindex="-1">单一分区分配 <a class="header-anchor" href="#单一分区分配" aria-label="Permalink to &quot;单一分区分配&quot;">​</a></h3><blockquote><p>只支持单道程序，内存分为系统区和用户区，用户程序放在用户区</p></blockquote><h3 id="固定多分区分配" tabindex="-1">固定多分区分配 <a class="header-anchor" href="#固定多分区分配" aria-label="Permalink to &quot;固定多分区分配&quot;">​</a></h3><blockquote><p>支持多道程序，内存用户空间分为若干个固定大小的分区，每个分区只能装入一道作业。</p></blockquote><ol><li>两种分区方式 <ul><li>分区大小相等</li><li>分区大小不等</li></ul></li></ol><h3 id="动态分区分配" tabindex="-1">动态分区分配 <a class="header-anchor" href="#动态分区分配" aria-label="Permalink to &quot;动态分区分配&quot;">​</a></h3><h4 id="内存分配算法" tabindex="-1">内存分配算法 <a class="header-anchor" href="#内存分配算法" aria-label="Permalink to &quot;内存分配算法&quot;">​</a></h4><ul><li><h5 id="首次适配算法-first-fit" tabindex="-1">首次适配算法（First fit） <a class="header-anchor" href="#首次适配算法-first-fit" aria-label="Permalink to &quot;首次适配算法（First fit）&quot;">​</a></h5><ul><li><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241218113308397.png" alt="image-20241218113308397"></p></li><li><p>eg: 请求一个6K大小的分区</p></li><li><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241216183921976.png" alt="image-20241216183921976"></p></li></ul></li><li><h5 id="下次适配算法-next-fit" tabindex="-1">下次适配算法（Next fit） <a class="header-anchor" href="#下次适配算法-next-fit" aria-label="Permalink to &quot;下次适配算法（Next fit）&quot;">​</a></h5><p>在first fit基础上，从上次搜索结果为止开始搜索。</p></li><li><h5 id="最佳适配算法-best-fit" tabindex="-1">最佳适配算法（Best fit） <a class="header-anchor" href="#最佳适配算法-best-fit" aria-label="Permalink to &quot;最佳适配算法（Best fit）&quot;">​</a></h5><ul><li><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241218113517806.png" alt="image-20241218113517806"></li></ul></li><li><h5 id="最差适配算法-worst-fit" tabindex="-1">最差适配算法（Worst fit） <a class="header-anchor" href="#最差适配算法-worst-fit" aria-label="Permalink to &quot;最差适配算法（Worst fit）&quot;">​</a></h5><ul><li><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241218113705889.png" alt="image-20241218113705889"></li></ul></li><li><h5 id="快速适配算法-quick-fit" tabindex="-1">快速适配算法（Quick fit） <a class="header-anchor" href="#快速适配算法-quick-fit" aria-label="Permalink to &quot;快速适配算法（Quick fit）&quot;">​</a></h5><p>将常用长度的空闲区有组织地存放</p></li></ul><h2 id="非连续分配存储管理方式" tabindex="-1">非连续分配存储管理方式 <a class="header-anchor" href="#非连续分配存储管理方式" aria-label="Permalink to &quot;非连续分配存储管理方式&quot;">​</a></h2><h3 id="动态重定位分区分配" tabindex="-1">动态重定位分区分配 <a class="header-anchor" href="#动态重定位分区分配" aria-label="Permalink to &quot;动态重定位分区分配&quot;">​</a></h3><h2 id="交换技术" tabindex="-1">交换技术 <a class="header-anchor" href="#交换技术" aria-label="Permalink to &quot;交换技术&quot;">​</a></h2><blockquote><p>交换技术的设计思想:内存空间紧张时，系统将内存中某些进程暂时换出外存，把外存中(某些已具备运行条件的进程换入内存(进程在内存与磁盘间动态调度)</p><ul><li>暂时换出外存等待的进程状态为挂起状态(挂起态，暂停)</li><li>挂起态又可以进一步细分为就绪挂起、阻塞挂起两种状态</li></ul></blockquote><h3 id="处理内存超载的两种方法" tabindex="-1">处理内存超载的两种方法 <a class="header-anchor" href="#处理内存超载的两种方法" aria-label="Permalink to &quot;处理内存超载的两种方法&quot;">​</a></h3><ol><li>交换技术</li><li>虚拟存储技术</li></ol><h3 id="空闲内存管理" tabindex="-1">空闲内存管理 <a class="header-anchor" href="#空闲内存管理" aria-label="Permalink to &quot;空闲内存管理&quot;">​</a></h3><h4 id="位图及链表的存储管理" tabindex="-1">位图及链表的存储管理 <a class="header-anchor" href="#位图及链表的存储管理" aria-label="Permalink to &quot;位图及链表的存储管理&quot;">​</a></h4><blockquote><p>一段有5个进程和3个空闲区的内存</p><ul><li>刻度表示内存分配的单元</li><li>阴影区域表示空闲</li></ul></blockquote><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241216183238729.png" alt="image-20241216183238729"></p><h3 id="使用链表的存储管理" tabindex="-1">使用链表的存储管理 <a class="header-anchor" href="#使用链表的存储管理" aria-label="Permalink to &quot;使用链表的存储管理&quot;">​</a></h3><p>结束进程X时与相邻区域的四种组合</p><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241216183351450.png" alt="image-20241216183351450"></p><h2 id="虚拟存储" tabindex="-1">虚拟存储 <a class="header-anchor" href="#虚拟存储" aria-label="Permalink to &quot;虚拟存储&quot;">​</a></h2><blockquote><p>基本思想: 程序、数据、堆栈占用空间的总和超过了实际物理内存的大小。</p><p>通常的策略:</p><ul><li>覆盖技术</li><li>分页</li></ul></blockquote><h3 id="覆盖技术" tabindex="-1">覆盖技术 <a class="header-anchor" href="#覆盖技术" aria-label="Permalink to &quot;覆盖技术&quot;">​</a></h3><blockquote><p>思想：将程序划分为多个段（多个模块），常用的段常驻内存，不常用的段在需要时调入内存。</p><p>内存分为一个“固定区”和多个“覆盖区”。</p><ul><li>需要常驻内存的段放在固定区，调入后不再调出（除非程序运行结束）</li><li>不常用的段放在覆盖区，需要用到时调入内存，用不到时调出。</li></ul></blockquote><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241216184437082.png" alt="image-20241216184437082"></p><ul><li>(a)程序的模块划分</li><li>(b)程序覆盖使用内存</li></ul><blockquote><p>不采用覆盖技术所需内存：A(20K)+B(50K)+C(30K)+D(20K)+E(40K)+F(30K)=190K</p><p>采用覆盖技术后使用内存: A(20K)+B(50K)+E(40K)=110K</p></blockquote><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241218105332024.png" alt="image-20241218105332024"></p><h3 id="分页存储管理" tabindex="-1">分页存储管理 <a class="header-anchor" href="#分页存储管理" aria-label="Permalink to &quot;分页存储管理&quot;">​</a></h3><h4 id="分页原理" tabindex="-1">分页原理 <a class="header-anchor" href="#分页原理" aria-label="Permalink to &quot;分页原理&quot;">​</a></h4><ol><li>划分 <ul><li>用户进程的虚地址空间划分为页</li><li>物理空间划分为与页大小相同的块</li><li>页的大小= 块的大小</li></ul></li><li>分配 <ul><li>将空闲块分配给逻辑页</li></ul></li><li>地址映射 <ul><li>借助页表实现地址映射</li></ul></li><li>页面置换 <ul><li>如果没有足够的物理块，将执行页面置换</li></ul></li></ol><h3 id="页表" tabindex="-1">页表 <a class="header-anchor" href="#页表" aria-label="Permalink to &quot;页表&quot;">​</a></h3><blockquote><p>页表面临的两个主要问题:</p><ol><li>页表可能非常的大 <ul><li>例如采用32-bit or 64-bit 地址结构的计算机</li></ul></li><li>地址映射必须快速完成 <ul><li>一条典型的指令通常要访问1、2次页表.(2,3 次 内存访问)</li></ul></li></ol></blockquote><h4 id="tlb-快表" tabindex="-1">TLB（快表） <a class="header-anchor" href="#tlb-快表" aria-label="Permalink to &quot;TLB（快表）&quot;">​</a></h4><blockquote><p>Translation Lookaside Buffer 地址址转换后备缓冲</p></blockquote><ul><li>提高变换速度→用高速缓冲存储器存放常用的页表项</li></ul><h3 id="页面置换算法" tabindex="-1">页面置换算法 <a class="header-anchor" href="#页面置换算法" aria-label="Permalink to &quot;页面置换算法&quot;">​</a></h3><blockquote><ol><li><p>页面发生缺页中断时:</p><ul><li>必须选择一个页面换出</li><li>为即将调入内存的页面腾出空间</li></ul></li><li><p>已修改的页面必须首先保存，未修改的页面只需要覆盖即可</p></li><li><p>不要选择频繁使用的页面置换出内存</p><ul><li>很可能很短时间内又要被调入内存</li><li>最求更少的缺页率</li></ul></li><li><p>缺页中断未必发生页面置换，若有可用的空闲内存块就不用进行页面置换</p></li></ol></blockquote><h4 id="最优页面置换算法-opt-optimal" tabindex="-1">最优页面置换算法（OPT（optimal）） <a class="header-anchor" href="#最优页面置换算法-opt-optimal" aria-label="Permalink to &quot;最优页面置换算法（OPT（optimal））&quot;">​</a></h4><blockquote><p>置换未来不再需要或最远的将来才会使用的页面</p><ul><li>最优但是不可实现</li></ul><p>可作为其他置换算法性能的评价标准</p></blockquote><h4 id="先进先出页面置换算法-fifo" tabindex="-1">先进先出页面置换算法（FIFO） <a class="header-anchor" href="#先进先出页面置换算法-fifo" aria-label="Permalink to &quot;先进先出页面置换算法（FIFO）&quot;">​</a></h4><blockquote><p>在表头的最久进入页面被置换出内存</p><p>缺点:</p><ul><li>在内存中最久的页面常常可能就是频繁使用的</li></ul></blockquote><ul><li><p>Belady‘s 现象（Belady异常）：当为进程分配的物理块数增大时，缺页次数不增反减的现象</p></li><li><p>只有FIFO会产生Belady异常</p></li><li><p>FIFO虽然实现简单，但该算法与实际进程运行时的规律不适应，因为先进入的页面可能经常被访问，因此算法性能差。</p></li></ul><h4 id="第二次机会页面置换算法-scr" tabindex="-1">第二次机会页面置换算法（SCR） <a class="header-anchor" href="#第二次机会页面置换算法-scr" aria-label="Permalink to &quot;第二次机会页面置换算法（SCR）&quot;">​</a></h4><blockquote><p>比FIFO有大的改善</p></blockquote><p>算法描述：</p><ul><li>按先进先出的方法排列的页面</li><li>设置一个访问位</li><li>当淘汰一个页面时，要检查其访问位：若访问位是1，给它第二次机会，选择下一个FIFO页面，并将其访问位置为0；若访问位是0，则淘汰它。</li><li>另外，访问到访问位为0的页面，将其访问位重新置为1</li></ul><h4 id="时钟页面置换算法-clock" tabindex="-1">时钟页面置换算法（Clock） <a class="header-anchor" href="#时钟页面置换算法-clock" aria-label="Permalink to &quot;时钟页面置换算法（Clock）&quot;">​</a></h4><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241222122342749.png" alt="image-20241222122342749"></p><h4 id="最近最少使用页面置换算法-lru" tabindex="-1">最近最少使用页面置换算法(LRU) <a class="header-anchor" href="#最近最少使用页面置换算法-lru" aria-label="Permalink to &quot;最近最少使用页面置换算法(LRU)&quot;">​</a></h4><blockquote><p>假设最近使用的页面很快又被使用：</p><ul><li>置换很长时间没被使用的页面</li></ul></blockquote><p>需要在内存中维护一个所有页面的链表</p><ul><li>最近最多使用的页面在表头，最近最少使用的页面在表尾</li><li>每次访问内存时都必须要更新整个链表!!</li></ul><p>另外一种做法就是在每个页表项中设置一个计数器 （硬件的实现方法）</p><ul><li>每个页表项中添加一个计数器</li><li>硬件矩阵</li></ul><h4 id="最近未使用页面置换算法-nru" tabindex="-1">最近未使用页面置换算法（NRU） <a class="header-anchor" href="#最近未使用页面置换算法-nru" aria-label="Permalink to &quot;最近未使用页面置换算法（NRU）&quot;">​</a></h4><blockquote><p>每个页面都设置一个访问位和修改位</p><ul><li>当页面被访问或修改时即设置访问位或修改位</li></ul><p>页面被分类成：</p><ul><li>未被访问, 未被修改</li><li>未被访问, 已被修改</li><li>已被访问, 未被修改</li><li>已被访问, 已被修改</li></ul><p>NRU 算法随机的选择页面淘汰之</p><ul><li>从类编号最小的非空类中挑选一个页面</li></ul><p>LRU的很粗糙的近似</p></blockquote><h4 id="工作集页面置换算法" tabindex="-1">工作集页面置换算法 <a class="header-anchor" href="#工作集页面置换算法" aria-label="Permalink to &quot;工作集页面置换算法&quot;">​</a></h4><h4 id="工作集时钟页面置换算法" tabindex="-1">工作集时钟页面置换算法 <a class="header-anchor" href="#工作集时钟页面置换算法" aria-label="Permalink to &quot;工作集时钟页面置换算法&quot;">​</a></h4><h4 id="eg" tabindex="-1">eg <a class="header-anchor" href="#eg" aria-label="Permalink to &quot;eg&quot;">​</a></h4><p>某程序在内存中分配<strong>三个</strong>页面，初始为空，页面走向 为4，3，2，1，4，3，5，4，3，2，1，5。 求分别采用OPT(最优页面置换算法)、FIFO、LRU、栈式算法作为页面置换算法时的缺页次数及缺页率？</p><p>注：为了方便比较，以下页面按调入先后进行了排序</p><ol><li><p>OPT</p><table tabindex="0"><thead><tr><th>OPT</th><th>4</th><th>3</th><th>2</th><th>1</th><th>4</th><th>3</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>5</th></tr></thead><tbody><tr><td>页1</td><td>4</td><td>3</td><td>2</td><td>1</td><td>1</td><td>1</td><td>5</td><td>5</td><td>5</td><td>2</td><td>1</td><td>1</td></tr><tr><td>页2</td><td></td><td>4</td><td>3</td><td>3</td><td>3</td><td>3</td><td>3</td><td>3</td><td>3</td><td>5</td><td>5</td><td>5</td></tr><tr><td>页3</td><td></td><td></td><td>4</td><td>4</td><td>4</td><td>4</td><td>4</td><td>4</td><td>4</td><td>4</td><td>4</td><td>4</td></tr><tr><td>缺页</td><td>P</td><td>P</td><td>P</td><td>P</td><td></td><td></td><td>P</td><td></td><td></td><td>P</td><td>P</td><td></td></tr></tbody></table><p>7次缺页，缺页率7/12</p></li><li><p>FIFO</p><table tabindex="0"><thead><tr><th>FIFO</th><th>4</th><th>3</th><th>2</th><th>1</th><th>4</th><th>3</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>5</th></tr></thead><tbody><tr><td>页1</td><td>4</td><td>3</td><td>2</td><td>1</td><td>4</td><td>3</td><td>5</td><td>5</td><td>5</td><td>2</td><td>1</td><td>1</td></tr><tr><td>页2</td><td></td><td>4</td><td>3</td><td>2</td><td>1</td><td>4</td><td>3</td><td>3</td><td>3</td><td>5</td><td>2</td><td>2</td></tr><tr><td>页3</td><td></td><td></td><td>4</td><td>3</td><td>2</td><td>1</td><td>4</td><td>4</td><td>4</td><td>3</td><td>5</td><td>5</td></tr><tr><td>缺页</td><td>P</td><td>P</td><td>P</td><td>P</td><td>P</td><td>P</td><td>P</td><td></td><td></td><td>P</td><td>P</td><td></td></tr></tbody></table><p>9次缺页，缺页率9/12</p></li><li><p>LRU</p><table tabindex="0"><thead><tr><th>LRU</th><th>4</th><th>3</th><th>2</th><th>1</th><th>4</th><th>3</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>5</th></tr></thead><tbody><tr><td>页1</td><td>4</td><td>3</td><td>2</td><td>1</td><td>4</td><td>3</td><td>5</td><td>4</td><td>3</td><td>2</td><td>1</td><td>5</td></tr><tr><td>页2</td><td></td><td>4</td><td>3</td><td>2</td><td>1</td><td>4</td><td>3</td><td>5</td><td>4</td><td>3</td><td>2</td><td>1</td></tr><tr><td>页3</td><td></td><td></td><td>4</td><td>3</td><td>2</td><td>1</td><td>4</td><td>3</td><td>5</td><td>4</td><td>3</td><td>2</td></tr><tr><td>缺页</td><td>P</td><td>P</td><td>P</td><td>P</td><td>P</td><td>P</td><td>P</td><td></td><td></td><td>P</td><td>P</td><td>P</td></tr></tbody></table><p>10次缺页，缺页率10/12</p></li><li><p>栈式算法</p><table tabindex="0"><thead><tr><th>栈式算法</th><th>4</th><th>3</th><th>2</th><th>1</th><th>4</th><th>3</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>5</th></tr></thead><tbody><tr><td>页1</td><td>4</td><td>3</td><td>2</td><td>1</td><td>4</td><td>3</td><td>5</td><td>4</td><td>3</td><td>2</td><td>1</td><td>5</td></tr><tr><td>页2</td><td></td><td>4</td><td>3</td><td>2</td><td>1</td><td>4</td><td>3</td><td>5</td><td>4</td><td>3</td><td>2</td><td>1</td></tr><tr><td>页3</td><td></td><td></td><td>4</td><td>3</td><td>2</td><td>1</td><td>4</td><td>3</td><td>5</td><td>4</td><td>3</td><td>2</td></tr><tr><td>缺页</td><td>P</td><td>P</td><td>P</td><td>P</td><td>P</td><td>P</td><td>P</td><td></td><td></td><td>P</td><td>P</td><td>P</td></tr></tbody></table></li></ol><p>​ 10次缺页，缺页率10/12</p><h2 id="分段" tabindex="-1">分段 <a class="header-anchor" href="#分段" aria-label="Permalink to &quot;分段&quot;">​</a></h2><h3 id="分段存储管理方式" tabindex="-1">分段存储管理方式 <a class="header-anchor" href="#分段存储管理方式" aria-label="Permalink to &quot;分段存储管理方式&quot;">​</a></h3><p>原理：将虚地址空间按逻辑结构关系分成若干段，每段有自己的段名，且都是从0地址开始的地址空间，段的长短可变，划分 后的地址结构为：<img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241220142856772.png" alt="image-20241220142856772"></p><h2 id="分页系统中的设计问题" tabindex="-1">分页系统中的设计问题 <a class="header-anchor" href="#分页系统中的设计问题" aria-label="Permalink to &quot;分页系统中的设计问题&quot;">​</a></h2><p>局部置换：发生缺页时只能选进程自己的物理块进行置换</p><p>全局置换：可以将操作系统保留的空闲物理块分配给缺页进程，也可以将别的进程持有的物理块置换到外存，再分配给缺页进程</p><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241222134439713.png" alt="image-20241222134439713"></p><p>抖动（颠簸）现象：刚刚换出的页面马上又要换入内存，刚刚换入的页面马上又要换出外存。</p><ul><li>主要原因是分配给进程的物理块不够。</li></ul><h2 id="页面大小" tabindex="-1">页面大小 <a class="header-anchor" href="#页面大小" aria-label="Permalink to &quot;页面大小&quot;">​</a></h2><ol><li><p>小页面</p><p>优势</p><ul><li>更少的内部碎片</li><li>更加灵活适合各种程序结构和数据段</li><li>减少内存中没用的程序</li></ul><p>不足</p><ul><li>程序需要更多页面，更大的页表</li></ul></li><li><p>系统开销取决于页表大小和内部碎片</p><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241222143046057.png" alt="image-20241222143046057"></p></li></ol><h2 id="内存映射文件机制" tabindex="-1">内存映射文件机制 <a class="header-anchor" href="#内存映射文件机制" aria-label="Permalink to &quot;内存映射文件机制&quot;">​</a></h2><ul><li>机制思想：进程通过一个系统调用将一个文件映射到其虚拟地址空间的一部分，访问这个文件就像访问内存中的一个大数组，而不是对文件进行读写</li><li>在多数实现中，在映射共享的页面时不会实际读入页面的内容，而是在访问页面时，页面才会被每次一页的读入，磁盘文件则被当作后备存储</li><li>当进程退出或显式地解除文件映射时，所有被修 改页面会写回文件</li></ul><h2 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h2><ol><li><p>存储管理的功能</p><ul><li>内存分配：合理分配内存资源给不同的进程。</li><li>内存保护：保护的目标是防止一个进程非法访问另一个进程的内存空间或操作系统的关键区域，保障系统的稳定性和安全性。如：基地址-界限寄存器保护法、保护键法等</li><li>内存共享：允许不同进程共享某些内存区域，从而实现进程间的通信，特别适用于需要高效交换大量数据的场景。</li><li>内存扩充：通过操作系统的虚拟内存技术，使得进程可以使用比实际物理内存更大的内存空间。</li><li>地址映射：地址映射是虚拟地址与物理地址之间的转换过程，操作系统利用硬件（内存管理单元，MMU）和软件（页表、段表等）来实现虚拟地址空间到物理地址空间的映射。</li></ul></li><li><p>存储空间和地址重定位（地址映射）</p><ul><li><a href="#存储管理相关概念">存储管理相关概念</a></li></ul></li><li><p>分区存储管理：固定、动态、动态重定位。如何进行分配，映射，保护机制以及所使用的数据结构。</p><ul><li>固定分区存储管理 <ul><li>内存划分成固定大小的分区，在操作系统启动时确定，之后不会改变。每个分区只能容纳一个进程。</li><li>虚拟地址到物理地址的映射：虚拟地址空间是由进程的起始地址和大小决定的。虚拟地址中的偏移量对应物理内存中的地址，整个虚拟地址空间直接映射到物理内存的一个固定大小的区域。</li><li>内存保护：每个分区对应一个进程，进程的内存空间不允许越界访问其他进程的空间。操作系统通过硬件的内存管理单元（MMU）来限制进程对物理内存的访问。</li><li>数据结构：分区表</li></ul></li><li>动态分区存储管理 <ul><li>动态分配：当一个进程请求内存时，操作系统根据进程的大小动态地分配一块连续的内存区域。采用合适分配算法<a href="#内存分配算法">内存分配算法</a></li><li></li></ul></li><li>动态重定位分区存储管理</li></ul></li><li><p>动态分区分配算法</p><ul><li><a href="#内存分配算法">内存分配算法</a></li></ul></li><li><p>虚拟存储的概念</p></li><li><p>覆盖和对换技术的原理、特点</p><ul><li><a href="#覆盖技术">覆盖技术</a></li></ul></li><li><p>页式存储分配主要是解决什么问题</p></li><li><p><strong>分页原理；逻辑地址到页号和页内偏移量的转换方法（两种：公式和二进制）</strong></p><ul><li><a href="#分页原理">分页原理</a></li></ul></li><li><p>页式存储的地址映射过程</p></li><li><p>二级页表的一级、二级页号和页内偏移量的计算</p></li><li><p>请求分页原理；局部性原理；页表结构与缺页中断</p></li><li><p><strong>请求分页的地址变换</strong></p></li><li><p><strong>页面转换算法（OPR FIFO LRU clock 时钟 P119）</strong></p><ul><li><p><a href="#页面置换算法">页面置换算法</a></p></li><li><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20250107130310469.png" alt="image-20250107130310469"></p></li><li><table tabindex="0"><thead><tr><th>FIFO</th><th>0</th><th>1</th><th>7</th><th>2</th><th>3</th><th>2</th><th>7</th><th>1</th><th>0</th><th>3</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>1</td><td>7</td><td>2</td><td>3</td><td>3</td><td>3</td><td>3</td><td>0</td><td>0</td></tr><tr><td>1</td><td></td><td>0</td><td>1</td><td>7</td><td>2</td><td>2</td><td>2</td><td>2</td><td>3</td><td>3</td></tr><tr><td>2</td><td></td><td></td><td>0</td><td>1</td><td>7</td><td>7</td><td>7</td><td>7</td><td>2</td><td>2</td></tr><tr><td>3</td><td></td><td></td><td></td><td>0</td><td>1</td><td>1</td><td>1</td><td>1</td><td>7</td><td>7</td></tr><tr><td>6次</td><td>P</td><td>P</td><td>P</td><td>P</td><td>P</td><td></td><td></td><td></td><td>P</td><td></td></tr></tbody></table></li><li><table tabindex="0"><thead><tr><th>LRU</th><th>0</th><th>1</th><th>7</th><th>2</th><th>3</th><th>2</th><th>7</th><th>1</th><th>0</th><th>3</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>1</td><td>7</td><td>2</td><td>3</td><td>3</td><td>3</td><td>3</td><td>0</td><td>3</td></tr><tr><td>1</td><td></td><td>0</td><td>1</td><td>7</td><td>2</td><td>2</td><td>2</td><td>2</td><td>2</td><td>0</td></tr><tr><td>2</td><td></td><td></td><td>0</td><td>1</td><td>7</td><td>7</td><td>7</td><td>7</td><td>7</td><td>7</td></tr><tr><td>3</td><td></td><td></td><td></td><td>0</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>7次</td><td>P</td><td>P</td><td>P</td><td>P</td><td>P</td><td></td><td></td><td></td><td>P</td><td>P</td></tr></tbody></table></li><li><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20250107131209206.png" alt="image-20250107131209206"></p><ul><li>(a):2</li><li>(b):3</li><li>(c):1</li><li>(d):2</li></ul></li></ul></li><li><p>分配置换策略；抖动</p><ul><li>抖动（颠簸）现象：刚刚换出的页面马上又要换入内存，刚刚换入的页面马上又要换出外存。</li></ul></li><li><p>分段存储管理的目的</p></li><li><p>分段存储的地址结构</p></li><li><p>分段存储的地址变换过程</p></li><li><p>段页式存储管理原理和地址变换过程</p></li><li><p>请求段页式存储管理原理</p></li><li><p>内存分配算法<img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20250107124554220.png" alt="image-20250107124554220"></p><ul><li>first fit:(地址递增排序) <ul><li>(a)20MB</li><li>(b)10MB</li><li>(c)18MB</li></ul></li><li>best fit(空闲区排序): <ul><li>(a)12MB</li><li>(b)10MB</li><li>(c)9MB</li></ul></li><li>worst fit(空闲区排序): <ul><li>(a)20MB</li><li>(b)18MB</li><li>(c)15MB</li></ul></li><li>next fit（在first fit 基础上，从上次搜索结束为止开始搜索）: <ul><li>(a)20MB</li><li>(b)18MB</li><li>(c)9MB</li></ul></li></ul></li><li><p>地址转换<img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20250107125704260.png" alt="image-20250107125704260"></p></li></ol><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20250107125755474.png" alt="image-20250107125755474"></p><ul><li>(a)8192+20=8212</li><li>(b)4100</li><li>(c)24576+8300-8192=24684</li></ul><ol start="22"><li></li></ol><h2 id="思考题-2" tabindex="-1">思考题 2 <a class="header-anchor" href="#思考题-2" aria-label="Permalink to &quot;思考题 2&quot;">​</a></h2><ol><li><p>如何理解虚拟存储与真实的物理内存间的关系？</p></li><li><p>分区存储管理用在专用的，具有特定工作任务的，嵌入式系统中，可不可行？</p><ul><li>分区存储管理用在专用的、具有特定工作任务的嵌入式系统中是可行的。</li><li>分区存储管理支持多道程序运行，可以提高存储器的利用率，并且管理相对简单，不需要太多的软硬件支持</li><li>分区存储能够消除存储设备内部的垃圾回收，减少写放大，节省成本，同时能大大减小 映射表大小，提升系统性能。</li><li>在嵌入式存储设备中，分区存储的使用再加上成熟的SLC缓存机制，可以弥补QLC寿命短和性能差两大短板，让QLC应用到嵌入式存储设备上变得可行。</li></ul></li><li><p>三种放置策略中，最佳适应法是不是比最坏适应法或首次适应算法性能要优异？内存利用率呢？为什么？</p></li><li><p>内存覆盖技术有哪些缺点？</p></li><li><p>内存在分配过程中产生碎片的本质是什么？ *</p></li></ol>',102),h=[e];function o(r,p,u,c,n,s){return l(),d("div",null,h)}const q=t(a,[["render",o]]);export{m as __pageData,q as default};
