import{_ as s,c as i,o as a,a6 as n}from"./chunks/framework.DkFL-jqo.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"工具/Git/gitignore.md","filePath":"工具/Git/gitignore.md"}'),e={name:"工具/Git/gitignore.md"},t=n(`<h2 id="什么是-gitignore文件" tabindex="-1">什么是.gitignore文件？ <a class="header-anchor" href="#什么是-gitignore文件" aria-label="Permalink to &quot;什么是.gitignore文件？&quot;">​</a></h2><p>.gitignore文件是一个文本文件，用于告诉Git在进行版本控制时应该忽略哪些文件或文件夹。我们可以在.gitignore文件中编写需要忽略的规则，这样Git在执行提交、推送和拉取操作时就会自动忽略这些文件。通常，.gitignore文件应该位于Git仓库的根目录下。</p><h2 id="gitignore文件的基本语法" tabindex="-1">.gitignore文件的基本语法 <a class="header-anchor" href="#gitignore文件的基本语法" aria-label="Permalink to &quot;.gitignore文件的基本语法&quot;">​</a></h2><p>.gitignore文件的语法非常简单，每行一个忽略规则。可以使用以下语法来定义忽略规则：</p><ol><li>使用<code>#</code>符号开头的行表示注释，这些行将被Git忽略；</li><li>使用<code>/</code>表示文件夹，例如<code>node_modules/</code>表示忽略当前目录下的node_modules文件夹；</li><li>使用<code>*</code>表示任意字符，例如<code>*.log</code>表示忽略所有的.log文件；</li><li>使用<code>!</code>表示否定，例如<code>!example.log</code>表示不忽略example.log文件。</li></ol><h2 id="如何在-gitignore中忽略node-modules文件夹" tabindex="-1">如何在.gitignore中忽略node_modules文件夹 <a class="header-anchor" href="#如何在-gitignore中忽略node-modules文件夹" aria-label="Permalink to &quot;如何在.gitignore中忽略node_modules文件夹&quot;">​</a></h2><p>在大多数Node.js项目中，我们都会使用npm包管理器来安装和管理依赖包。这些依赖包通常位于项目根目录下的<a href="https://geek-docs.com/git/git-questions/856_git_ignoring_node_modules_using_gitignore.html#" target="_blank" rel="noreferrer"> node</a>_modules文件夹中。由于依赖包的数量庞大，将node_modules纳入<a href="https://geek-docs.com/git/git-questions/856_git_ignoring_node_modules_using_gitignore.html#" target="_blank" rel="noreferrer"> 版本控制系统</a>会导致仓库过于庞大、上传和下载速度过慢。因此，我们应该将node_modules添加到.gitignore文件中，以便忽略该文件夹。</p><p>在.gitignore文件中设置忽略node_modules文件夹的规则如下：</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>node_modules/</span></span></code></pre></div><p>Plaintext</p><p>Copy</p><p>以上规则表示忽略根目录下的node_modules文件夹以及其下的所有文件。</p><h2 id="在-gitignore中添加其他忽略规则" tabindex="-1">在.gitignore中添加其他忽略规则 <a class="header-anchor" href="#在-gitignore中添加其他忽略规则" aria-label="Permalink to &quot;在.gitignore中添加其他忽略规则&quot;">​</a></h2><p>除了node_modules文件夹以外，还有一些其他常见的文件或文件夹也应该添加到.gitignore中。例如，我们通常不想将编译生成的文件、IDE或文本编辑器生成的配置文件、敏感信息等提交到Git仓库中。以下是一些常见的忽略规则示例：</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 忽略IDE生成的文件和配置</span></span>
<span class="line"><span>.idea/</span></span>
<span class="line"><span>*.iml</span></span>
<span class="line"><span>.vscode/</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 忽略敏感信息</span></span>
<span class="line"><span>config.js</span></span>
<span class="line"><span>*.env</span></span>
<span class="line"><span>*.pem</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 忽略编译生成的文件</span></span>
<span class="line"><span>build/</span></span>
<span class="line"><span>dist/</span></span>
<span class="line"><span>*.dll</span></span>
<span class="line"><span>*.exe</span></span></code></pre></div><p>Plaintext</p><p>Copy</p><p>根据项目实际情况，我们可以根据需要添加其他的忽略规则。</p><h2 id="如何应用-gitignore文件的变更" tabindex="-1">如何应用.gitignore文件的变更 <a class="header-anchor" href="#如何应用-gitignore文件的变更" aria-label="Permalink to &quot;如何应用.gitignore文件的变更&quot;">​</a></h2><p>一旦我们在.gitignore文件中添加了相应的忽略规则，Git会自动开始忽略这些文件。但是，如果在.gitignore文件中添加或修改了规则，Git可能不会立即生效。这时我们需要执行以下命令来应用.gitignore文件的变更：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 清除已缓存的文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --cached</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重新添加所有文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 提交变更</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Update .gitignore&quot;</span></span></code></pre></div><p>Bash</p><p>Copy</p><p>通过以上命令，我们清除了已缓存的文件并重新将所有文件添加到暂存区中，然后再次提交变更即可。</p>`,24),p=[t];function l(o,g,d,r,h,c){return a(),i("div",null,p)}const _=s(e,[["render",l]]);export{u as __pageData,_ as default};
