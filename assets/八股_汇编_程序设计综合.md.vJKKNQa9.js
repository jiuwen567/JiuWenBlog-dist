import{_ as s,c as n,o as a,a6 as p}from"./chunks/framework.DkFL-jqo.js";const E=JSON.parse('{"title":"顺序程序设计","description":"","frontmatter":{},"headers":[],"relativePath":"八股/汇编/程序设计综合.md","filePath":"八股/汇编/程序设计综合.md"}'),l={name:"八股/汇编/程序设计综合.md"},e=p(`<h1 id="顺序程序设计" tabindex="-1">顺序程序设计 <a class="header-anchor" href="#顺序程序设计" aria-label="Permalink to &quot;顺序程序设计&quot;">​</a></h1><h2 id="_1" tabindex="-1">1 <a class="header-anchor" href="#_1" aria-label="Permalink to &quot;1&quot;">​</a></h2><blockquote><p>试编制一程序(不考虑以 上情况)，求出下列公式中的Z值，并存放在 RESULT单元中： Z=((X+Y)*8-X)/2。 其中X,Y的值分别存放在VARX,VARY单元中。</p></blockquote><div class="language-assembly vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">assembly</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DATA SEGMENT USE16</span></span>
<span class="line"><span>     VARX DW 6</span></span>
<span class="line"><span>     VARY DW 7</span></span>
<span class="line"><span>     RESULT DW ?</span></span>
<span class="line"><span> DATA ENDS</span></span>
<span class="line"><span> </span></span>
<span class="line"><span> CODE SEGMENT USE16</span></span>
<span class="line"><span>     ASSUME CS:CODE,DS:DATA</span></span>
<span class="line"><span>START:MOV AX,DATA</span></span>
<span class="line"><span>     MOV DS,AX</span></span>
<span class="line"><span>     MOV DX,VARX</span></span>
<span class="line"><span>     ADD DX,VARY</span></span>
<span class="line"><span>     MOV CL,3</span></span>
<span class="line"><span>     SAL DX,CL</span></span>
<span class="line"><span>     SUB DX,VARX</span></span>
<span class="line"><span>     SAR DX,1</span></span>
<span class="line"><span>     MOV RESULT,DX</span></span>
<span class="line"><span>     MOV AH,4CH</span></span>
<span class="line"><span>     INT 21H</span></span>
<span class="line"><span> CODE ENDS</span></span>
<span class="line"><span> END START</span></span></code></pre></div><h1 id="分支程序设计" tabindex="-1">分支程序设计 <a class="header-anchor" href="#分支程序设计" aria-label="Permalink to &quot;分支程序设计&quot;">​</a></h1><h2 id="简单分支" tabindex="-1">简单分支 <a class="header-anchor" href="#简单分支" aria-label="Permalink to &quot;简单分支&quot;">​</a></h2><h3 id="_1-1" tabindex="-1">1 <a class="header-anchor" href="#_1-1" aria-label="Permalink to &quot;1&quot;">​</a></h3><blockquote><p>将一个16位二进制数以二进制数的方式显示。</p></blockquote><div class="language-assembly vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">assembly</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DATA SEGMENT</span></span>
<span class="line"><span>    NUM DW 5678H</span></span>
<span class="line"><span>DATA ENDS</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>CODE SEGMENT</span></span>
<span class="line"><span>     ASSUME CS:CODE,DS:DATA</span></span>
<span class="line"><span></span></span>
<span class="line"><span>START:MOV AX,DATA</span></span>
<span class="line"><span>    MOV DS,AX</span></span>
<span class="line"><span>    MOV BX,NUM</span></span>
<span class="line"><span>    MOV CX,16 ;每次移出1位、循环16次</span></span>
<span class="line"><span>LAST:</span></span>
<span class="line"><span>    MOV DL,&#39;0&#39;</span></span>
<span class="line"><span>    RCL BX,1</span></span>
<span class="line"><span>    JNC NEXT</span></span>
<span class="line"><span>    MOV DL,&#39;1&#39;</span></span>
<span class="line"><span>NEXT:</span></span>
<span class="line"><span>    MOV AH,2</span></span>
<span class="line"><span>    INT 21H</span></span>
<span class="line"><span>    LOOP LAST</span></span>
<span class="line"><span>    MOV AH,4CH</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    INT 21H</span></span>
<span class="line"><span> CODE ENDS</span></span>
<span class="line"><span> END START</span></span></code></pre></div><h2 id="复杂分支" tabindex="-1">复杂分支 <a class="header-anchor" href="#复杂分支" aria-label="Permalink to &quot;复杂分支&quot;">​</a></h2><h3 id="_1-2" tabindex="-1">1 <a class="header-anchor" href="#_1-2" aria-label="Permalink to &quot;1&quot;">​</a></h3><blockquote><p>设某数据块存放在BUFFER开始的100个 字节单元中。试编程统计数据块中负数的个数，并将统计的结果存放到NUMBER单元中</p></blockquote><p>下面解法以10个字节数据演示</p><ol><li><p><code>CMP AL,0 JG / JL</code> PS:必须使用<code>JG/JL</code>，而不能使用<code>JA/JB</code></p><div class="language-assembly vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">assembly</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DATA SEGMENT</span></span>
<span class="line"><span>    BUFFER DB 10,-10,20,3,2,1,0,-1,-3,-10</span></span>
<span class="line"><span>DATA ENDS</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CODE SEGMENT</span></span>
<span class="line"><span>    ASSUME DS:CODE,CS:CODE</span></span>
<span class="line"><span>    START:</span></span>
<span class="line"><span>        MOV AX,DATA</span></span>
<span class="line"><span>        MOV DS,AX</span></span>
<span class="line"><span>        LEA SI,BUFFER</span></span>
<span class="line"><span>        MOV CX,10</span></span>
<span class="line"><span>        MOV BL,0</span></span>
<span class="line"><span>        DEC SI</span></span>
<span class="line"><span>    NEXT:</span></span>
<span class="line"><span>        INC SI</span></span>
<span class="line"><span>        MOV AL,[SI]</span></span>
<span class="line"><span>        CMP AL,0</span></span>
<span class="line"><span>        JGE LAST</span></span>
<span class="line"><span>        INC BL</span></span>
<span class="line"><span>    LAST:</span></span>
<span class="line"><span>        LOOP NEXT</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    ADD BX,30H</span></span>
<span class="line"><span>    MOV DL,BL</span></span>
<span class="line"><span>    MOV AH,2</span></span>
<span class="line"><span>    INT 21H</span></span>
<span class="line"><span>    MOV AH,4CH</span></span>
<span class="line"><span>    INT 21H</span></span>
<span class="line"><span>CODE ENDS</span></span>
<span class="line"><span>END START</span></span></code></pre></div></li><li><p><code>TEST AL,80H;1000 0000B </code></p><p><code>JZ / JNZ</code></p><div class="language-assembly vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">assembly</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DATA SEGMENT</span></span>
<span class="line"><span>    BUFFER DB 10,-10,20,3,2,1,0,-1,-3,-10</span></span>
<span class="line"><span>DATA ENDS</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CODE SEGMENT</span></span>
<span class="line"><span>    ASSUME DS:CODE,CS:CODE</span></span>
<span class="line"><span>    START:</span></span>
<span class="line"><span>        MOV AX,DATA</span></span>
<span class="line"><span>        MOV DS,AX</span></span>
<span class="line"><span>        LEA SI,BUFFER</span></span>
<span class="line"><span>        MOV CX,10</span></span>
<span class="line"><span>        MOV BL,0</span></span>
<span class="line"><span>        DEC SI</span></span>
<span class="line"><span>    NEXT:</span></span>
<span class="line"><span>        INC SI</span></span>
<span class="line"><span>        MOV AL,[SI]</span></span>
<span class="line"><span>        TEST AL,80H</span></span>
<span class="line"><span>        JZ LAST</span></span>
<span class="line"><span>        INC BL</span></span>
<span class="line"><span>    LAST:</span></span>
<span class="line"><span>        LOOP NEXT</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    ADD BX,30H</span></span>
<span class="line"><span>    MOV DL,BL</span></span>
<span class="line"><span>    MOV AH,2</span></span>
<span class="line"><span>    INT 21H</span></span>
<span class="line"><span>    MOV AH,4CH</span></span>
<span class="line"><span>    INT 21H</span></span>
<span class="line"><span>CODE ENDS</span></span>
<span class="line"><span>END START</span></span></code></pre></div></li><li><p>利用SF</p><div class="language-assembly vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">assembly</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DATA SEGMENT</span></span>
<span class="line"><span>    BUFFER DB 10,-10,20,3,2,1,0,-1,-3,-10</span></span>
<span class="line"><span>DATA ENDS</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CODE SEGMENT</span></span>
<span class="line"><span>    ASSUME DS:CODE,CS:CODE</span></span>
<span class="line"><span>    START:</span></span>
<span class="line"><span>        MOV AX,DATA</span></span>
<span class="line"><span>        MOV DS,AX</span></span>
<span class="line"><span>        LEA SI,BUFFER</span></span>
<span class="line"><span>        MOV CX,10</span></span>
<span class="line"><span>        MOV BL,0</span></span>
<span class="line"><span>        DEC SI</span></span>
<span class="line"><span>    NEXT:</span></span>
<span class="line"><span>        INC SI</span></span>
<span class="line"><span>        MOV AL,[SI]</span></span>
<span class="line"><span>        OR AL,AL</span></span>
<span class="line"><span>        JNS LAST</span></span>
<span class="line"><span>        INC BL</span></span>
<span class="line"><span>    LAST:</span></span>
<span class="line"><span>        LOOP NEXT</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    ADD BX,30H</span></span>
<span class="line"><span>    MOV DL,BL</span></span>
<span class="line"><span>    MOV AH,2</span></span>
<span class="line"><span>    INT 21H</span></span>
<span class="line"><span>    MOV AH,4CH</span></span>
<span class="line"><span>    INT 21H</span></span>
<span class="line"><span>CODE ENDS</span></span>
<span class="line"><span>END START</span></span></code></pre></div></li></ol><h3 id="_2" tabindex="-1">2 <a class="header-anchor" href="#_2" aria-label="Permalink to &quot;2&quot;">​</a></h3><blockquote><p>如果DL是一个小写字母，则转换为大写</p><ul><li>结论1：大小写字母的ASCII码值相差20H</li><li>结论2：大小写字母的ASCII码值仅D5位不同</li></ul></blockquote><div class="language-assembly vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">assembly</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cmp dl,&#39;a&#39;</span></span>
<span class="line"><span>jb exit    ;小于小写字母a，不需要处理</span></span>
<span class="line"><span>cmp dl,&#39;z&#39;</span></span>
<span class="line"><span>ja exit ;大于小写字母z，也不需要处理</span></span>
<span class="line"><span>sub dl,20h ; 是小写字母，则转换为大写</span></span>
<span class="line"><span>exit:</span></span></code></pre></div><ul><li>方法1（加减指令）：“ADD DL,20H” “SUB DL,20H”</li><li>方法2（逻辑指令）：“OR DL,20H” “AND DL,0DFH”</li><li>大小写互换（异或指令）：“XOR DL,20H”</li></ul><h1 id="循环程序设计" tabindex="-1">循环程序设计 <a class="header-anchor" href="#循环程序设计" aria-label="Permalink to &quot;循环程序设计&quot;">​</a></h1><h2 id="_1-3" tabindex="-1">1 <a class="header-anchor" href="#_1-3" aria-label="Permalink to &quot;1&quot;">​</a></h2><blockquote><p>求最大数。假设从内存的BUF单元开始存 有一个以ASCII码方式表示的字符串，求其中 的最大数(即ASCII码最大的字符的ASCII值)， 显示到屏幕上。</p></blockquote>`,21),i=[e];function c(t,o,A,d,D,h){return a(),n("div",null,i)}const r=s(l,[["render",c]]);export{E as __pageData,r as default};
