import{_ as s,c as a,o as i,a6 as n}from"./chunks/framework.DkFL-jqo.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"前端三件套/js/js入门.md","filePath":"前端三件套/js/js入门.md"}'),e={name:"前端三件套/js/js入门.md"},p=n(`<p>[TOC]</p><h2 id="_1-let、const、var" tabindex="-1">1. let、const、var <a class="header-anchor" href="#_1-let、const、var" aria-label="Permalink to &quot;1. let、const、var&quot;">​</a></h2><blockquote><p>大写字母作为常量标识符，用小写字母或者驼峰命名作为变量（对象或数组）标识符。</p></blockquote><h3 id="_1-1-let-与-var的区别与使用" tabindex="-1">1.1**<code>let</code> 与 <code>var</code>的区别与使用：** <a class="header-anchor" href="#_1-1-let-与-var的区别与使用" aria-label="Permalink to &quot;1.1**\`let\` 与 \`var\`的区别与使用：**&quot;">​</a></h3><p>使用 <code>var</code> 关键字声明变量的最大问题之一是你可以轻松覆盖变量声明：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> camper </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;James&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> camper </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;David&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(camper);</span></span></code></pre></div><p>在上面的代码中，<code>camper</code> 变量最初声明为 <code>James</code>，然后被覆盖为 <code>David</code>。 然后控制台显示字符串 <code>David</code>。</p><p>在小型应用程序中，你可能不会遇到此类问题。 但是随着你的代码库变大，你可能会意外地覆盖一个你不打算覆盖的变量。 由于此行为不会引发错误，因此搜索和修复错误变得更加困难。</p><p>ES6 中引入了一个名为 <code>let</code> 的关键字，这是对 JavaScript 的一次重大更新，以解决与 <code>var</code> 关键字有关的潜在问题。 你将在后面的挑战中了解其他 ES6 特性。</p><p>如果将上面代码中的 <code>var</code> 替换为 <code>let</code> ，则会导致错误：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> camper </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;James&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> camper </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;David&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>该错误可以在你的浏览器控制台中看到。</p><p>所以不像 <code>var</code>，当你使用 <code>let</code> 时，同名的变量只能声明一次。</p><p><strong><code>const</code>的使用：</strong></p><p>关键字 <code>let</code> 并不是声明变量的唯一新方法。 在 ES6 中，你还可以使用 <code>const</code> 关键字声明变量。</p><p><code>const</code> 具有 <code>let</code> 的所有出色功能，另外还有一个额外的好处，即使用 <code>const</code> 声明的变量是只读的。 它们是一个常量值，这意味着一旦一个变量被赋值为 <code>const</code>，它就不能被重新赋值：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> FAV_PET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Cats&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FAV_PET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Dogs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>由于重新分配 <code>FAV_PET</code> 的值，控制台将显示错误。</p><p>你应该始终使用 <code>cons</code></p><h3 id="_1-2-不存在变量提升" tabindex="-1">1.2 不存在变量提升 <a class="header-anchor" href="#_1-2-不存在变量提升" aria-label="Permalink to &quot;1.2 不存在变量提升&quot;">​</a></h3><p><code>var</code>命令会发生“变量提升”现象，即变量可以在声明之前使用，值为<code>undefined</code>。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。</p><p>为了纠正这种现象，<code>let</code>命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// var 的情况</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foo); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出undefined</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// let 的情况</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bar); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 报错ReferenceError</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>上面代码中，变量<code>foo</code>用<code>var</code>命令声明，会发生变量提升，即脚本开始运行时，变量<code>foo</code>已经存在了，但是没有值，所以会输出<code>undefined</code>。变量<code>bar</code>用<code>let</code>命令声明，不会发生变量提升。这表示在声明它之前，变量<code>bar</code>是不存在的，这时如果用到它，就会抛出一个错误。</p><h2 id="_2-数据类型" tabindex="-1">2. 数据类型 <a class="header-anchor" href="#_2-数据类型" aria-label="Permalink to &quot;2. 数据类型&quot;">​</a></h2><div class="language-mindmap vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mindmap</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 数据类型</span></span>
<span class="line"><span>## 1. **基本数据类型**:</span></span>
<span class="line"><span>###     **Number**</span></span>
<span class="line"><span>#### 整数和浮点数。</span></span>
<span class="line"><span>### **String**</span></span>
<span class="line"><span>####    文本。</span></span>
<span class="line"><span>### **Boolean**</span></span>
<span class="line"><span>####    表示逻辑值，即true或false。</span></span>
<span class="line"><span>### **Null**</span></span>
<span class="line"><span>####    表示空值。</span></span>
<span class="line"><span>### **Undefined** </span></span>
<span class="line"><span>####    表示未定义的值。</span></span>
<span class="line"><span>### **Symbol** (ES6新增):</span></span>
<span class="line"><span>####    唯一且不可变的值，通常用作对象属性的键值。</span></span>
<span class="line"><span>###    function</span></span>
<span class="line"><span>#### 如果操作数是函数</span></span>
<span class="line"><span>### - **Object**</span></span>
<span class="line"><span>####    对象，可以包含多个键值对。</span></span>
<span class="line"><span>## 3. typeof 获取数据类型</span></span>
<span class="line"><span>### - typeof operand;//operand：要检测其类型的操作数。</span></span></code></pre></div>`,26),t=[p];function l(h,d,o,c,k,r){return i(),a("div",null,t)}const y=s(e,[["render",l]]);export{g as __pageData,y as default};
