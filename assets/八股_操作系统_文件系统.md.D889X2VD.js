import{_ as a,c as e,o as i,a6 as l}from"./chunks/framework.DkFL-jqo.js";const g=JSON.parse('{"title":"文件","description":"","frontmatter":{},"headers":[],"relativePath":"八股/操作系统/文件系统.md","filePath":"八股/操作系统/文件系统.md"}'),t={name:"八股/操作系统/文件系统.md"},o=l('<h1 id="文件" tabindex="-1">文件 <a class="header-anchor" href="#文件" aria-label="Permalink to &quot;文件&quot;">​</a></h1><h2 id="文件逻辑结构" tabindex="-1">文件逻辑结构 <a class="header-anchor" href="#文件逻辑结构" aria-label="Permalink to &quot;文件逻辑结构&quot;">​</a></h2><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241223170212199.png" alt="image-20241223170212199"></p><p>三种文件结构：</p><ul><li>字节序列</li><li>记录序列</li><li>树</li></ul><h2 id="文件类型" tabindex="-1">文件类型 <a class="header-anchor" href="#文件类型" aria-label="Permalink to &quot;文件类型&quot;">​</a></h2><p>普通文件</p><ul><li>ASCII文件、二进制文件</li></ul><p>目录文件</p><p>特殊文件</p><ul><li>字符、块</li></ul><h2 id="文件存取" tabindex="-1">文件存取 <a class="header-anchor" href="#文件存取" aria-label="Permalink to &quot;文件存取&quot;">​</a></h2><p>顺序存取</p><p>随机存取</p><h1 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h1><h2 id="一级目录系统" tabindex="-1">一级目录系统 <a class="header-anchor" href="#一级目录系统" aria-label="Permalink to &quot;一级目录系统&quot;">​</a></h2><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241226110018952.png" alt="image-20241226110018952"></p><h2 id="两层目录系统" tabindex="-1">两层目录系统 <a class="header-anchor" href="#两层目录系统" aria-label="Permalink to &quot;两层目录系统&quot;">​</a></h2><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241226110032944.png" alt="image-20241226110032944"></p><h2 id="层次目录系统" tabindex="-1">层次目录系统 <a class="header-anchor" href="#层次目录系统" aria-label="Permalink to &quot;层次目录系统&quot;">​</a></h2><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241226110053988.png" alt="image-20241226110053988"></p><h1 id="文件系统的实现" tabindex="-1">文件系统的实现 <a class="header-anchor" href="#文件系统的实现" aria-label="Permalink to &quot;文件系统的实现&quot;">​</a></h1><h2 id="文件的实现" tabindex="-1">文件的实现 <a class="header-anchor" href="#文件的实现" aria-label="Permalink to &quot;文件的实现&quot;">​</a></h2><h3 id="连续结构" tabindex="-1">连续结构 <a class="header-anchor" href="#连续结构" aria-label="Permalink to &quot;连续结构&quot;">​</a></h3><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241226110742873.png" alt="image-20241226110742873"></p><h3 id="链表结构" tabindex="-1">链表结构 <a class="header-anchor" href="#链表结构" aria-label="Permalink to &quot;链表结构&quot;">​</a></h3><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241226110801601.png" alt="image-20241226110801601"></p><p>在内存中的链表结构：<img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241226110916593.png" alt="image-20241226110916593"></p><h3 id="索引结点结构" tabindex="-1">索引结点结构 <a class="header-anchor" href="#索引结点结构" aria-label="Permalink to &quot;索引结点结构&quot;">​</a></h3><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241226110956407.png" alt="image-20241226110956407"></p><h4 id="多级索引的物理结构" tabindex="-1">多级索引的物理结构 <a class="header-anchor" href="#多级索引的物理结构" aria-label="Permalink to &quot;多级索引的物理结构&quot;">​</a></h4><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241226111102590.png" alt="image-20241226111102590"></p><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241226111317226.png" alt="image-20241226111317226"></p><blockquote><p>二次间接索引，第一个索引表中的索引块存储的是指向其他索引块的地址</p></blockquote><h3 id="文件系统的几种物理结构分析" tabindex="-1">文件系统的几种物理结构分析 <a class="header-anchor" href="#文件系统的几种物理结构分析" aria-label="Permalink to &quot;文件系统的几种物理结构分析&quot;">​</a></h3><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241226111752250.png" alt="image-20241226111752250"></p><h2 id="目录的实现" tabindex="-1">目录的实现 <a class="header-anchor" href="#目录的实现" aria-label="Permalink to &quot;目录的实现&quot;">​</a></h2><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241226111930986.png" alt="image-20241226111930986"></p><p>(a) 简单目录实现：将文件名与文件属性作为一个目录项 放在一起。即包含固定大小的目录项，在目录项中有 磁盘地址和属性。</p><p>(b) 索引目录实现：将文件名与文件属性分开，每个目录项只有文件名和索引节点。</p><h3 id="目录实现的问题" tabindex="-1">目录实现的问题 <a class="header-anchor" href="#目录实现的问题" aria-label="Permalink to &quot;目录实现的问题&quot;">​</a></h3><ol><li>可变长文件名问题</li><li>文件共享问题 <ul><li>有共享文件的文件系统<img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241226112641408.png" alt="image-20241226112641408"></li></ul></li></ol><h3 id="在目录中处理长文件名的两种方法" tabindex="-1">在目录中处理长文件名的两种方法 <a class="header-anchor" href="#在目录中处理长文件名的两种方法" aria-label="Permalink to &quot;在目录中处理长文件名的两种方法&quot;">​</a></h3><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241226112244100.png" alt="image-20241226112244100"></p><p>(a) 在行中</p><p>(b) 在堆中</p><h3 id="共享文件" tabindex="-1">共享文件 <a class="header-anchor" href="#共享文件" aria-label="Permalink to &quot;共享文件&quot;">​</a></h3><h4 id="硬链接-共享索引节点" tabindex="-1">硬链接（共享索引节点） <a class="header-anchor" href="#硬链接-共享索引节点" aria-label="Permalink to &quot;硬链接（共享索引节点）&quot;">​</a></h4><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241226112849394.png" alt="image-20241226112849394"></p><p>(a) 连接之前的状况</p><p>(b) 创建连接之后</p><p>(c) 当所有者删除文件后</p><h4 id="软链接-符号链接" tabindex="-1">软链接（符号链接） <a class="header-anchor" href="#软链接-符号链接" aria-label="Permalink to &quot;软链接（符号链接）&quot;">​</a></h4><ol><li>系统为共享文件在共享目录下建立新的文件（类型LINK）</li><li>新建立LINK文件内容为共享文件的链接， 即共享文件路径名</li><li>访问共享文件时，先找到该LINK文件，根 据其中的链接访问该文件</li><li>eg:桌面快捷方式</li></ol><h2 id="文件系统的可靠性" tabindex="-1">文件系统的可靠性 <a class="header-anchor" href="#文件系统的可靠性" aria-label="Permalink to &quot;文件系统的可靠性&quot;">​</a></h2><h3 id="文件系统备份" tabindex="-1">文件系统备份 <a class="header-anchor" href="#文件系统备份" aria-label="Permalink to &quot;文件系统备份&quot;">​</a></h3><p>备份原因:</p><ul><li>灾备</li><li>数据丢失</li></ul><p>备份策略：(全量, 增量)</p><p>转储：</p><ul><li>物理转储</li><li>逻辑转储</li></ul><h3 id="文件系统一致性" tabindex="-1">文件系统一致性 <a class="header-anchor" href="#文件系统一致性" aria-label="Permalink to &quot;文件系统一致性&quot;">​</a></h3><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241226115417846.png" alt="image-20241226115417846"></p><p>文件系统状态：</p><ul><li>一致（a）</li><li>块丢失 (b)</li><li>空闲表中有重复块 （c）</li><li>重复数据块 (d)</li></ul><h2 id="文件系统性能" tabindex="-1">文件系统性能 <a class="header-anchor" href="#文件系统性能" aria-label="Permalink to &quot;文件系统性能&quot;">​</a></h2><ol><li><p>高速缓存</p></li><li><p>块提前读</p><ul><li>若当前访问块k，提前预读k+1块</li><li>仅仅适用于顺序读取的文件</li></ul></li><li><p>减少磁盘臂运动</p><ul><li>可能顺序存取的块放在一起（位图，块簇）</li><li>i节点分散存放</li><li><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241226120125404.png" alt="image-20241226120125404"></li></ul></li></ol><h3 id="磁盘碎片整理" tabindex="-1">磁盘碎片整理 <a class="header-anchor" href="#磁盘碎片整理" aria-label="Permalink to &quot;磁盘碎片整理&quot;">​</a></h3><ul><li>操作系统初始安装后，从磁盘的开始位 置连续安装了程序与文件。</li><li>随着文件被不断创建与删除，磁盘空间 会产生很多碎片，影响性能。</li><li>磁盘性能的恢复方法：移动文件使他们 相邻，并把所有的空闲空间放在一个或 多个大的连续区域内。</li></ul><h2 id="文件操作" tabindex="-1">文件操作 <a class="header-anchor" href="#文件操作" aria-label="Permalink to &quot;文件操作&quot;">​</a></h2><ol><li>Create 2. Delete 3. Open 4. Close 5. Read 6. Write 7. Append 8. Seek 9. Get attributes 10.Set Attributes 11.Rename</li></ol>',71),r=[o];function h(n,s,c,p,m,u){return i(),e("div",null,r)}const b=a(t,[["render",h]]);export{g as __pageData,b as default};
