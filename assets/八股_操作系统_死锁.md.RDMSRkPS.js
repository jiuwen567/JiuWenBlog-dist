import{_ as a,c as l,o as i,a6 as e}from"./chunks/framework.DkFL-jqo.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"八股/操作系统/死锁.md","filePath":"八股/操作系统/死锁.md"}'),t={name:"八股/操作系统/死锁.md"},o=e('<h2 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h2><blockquote><p>如果一个进程集合中的每个进程都在等待只能由该进程集合中的其他进程才能引发的事件，那么该进程集合时死锁的</p></blockquote><h2 id="发生死锁的四个必要条件" tabindex="-1">发生死锁的四个必要条件 <a class="header-anchor" href="#发生死锁的四个必要条件" aria-label="Permalink to &quot;发生死锁的四个必要条件&quot;">​</a></h2><ol><li><h3 id="互斥条件" tabindex="-1">互斥条件 <a class="header-anchor" href="#互斥条件" aria-label="Permalink to &quot;互斥条件&quot;">​</a></h3></li></ol><p>每个资源要么已经分配给了一个进程，要么就是可用的</p><ol start="2"><li><h3 id="占有和等待" tabindex="-1">占有和等待 <a class="header-anchor" href="#占有和等待" aria-label="Permalink to &quot;占有和等待&quot;">​</a></h3></li></ol><p>已经得到了某个资源的进程可以再申请新的资源</p><ol start="3"><li><h3 id="不可抢占条件" tabindex="-1">不可抢占条件 <a class="header-anchor" href="#不可抢占条件" aria-label="Permalink to &quot;不可抢占条件&quot;">​</a></h3></li></ol><p>已经分配给一个进程的资源不能强制性被抢占，它只能被占有它的进程显示地释放</p><ol start="4"><li><h3 id="环路等待条件" tabindex="-1">环路等待条件 <a class="header-anchor" href="#环路等待条件" aria-label="Permalink to &quot;环路等待条件&quot;">​</a></h3></li></ol><p>死锁发生时，系统中一定有由两个或两个以上的进程组成的一条环路，该环路中的每一个进程都在等待下一个进程所占有的资源</p><h2 id="死锁建模" tabindex="-1">死锁建模 <a class="header-anchor" href="#死锁建模" aria-label="Permalink to &quot;死锁建模&quot;">​</a></h2><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241213144101080.png" alt="image-20241213144101080"></p><p>(a) 进程A占有一个资源</p><p>(b) 进程B请求一个资源</p><p>(c) 死锁</p><h2 id="四种处理死锁的策略" tabindex="-1">四种处理死锁的策略 <a class="header-anchor" href="#四种处理死锁的策略" aria-label="Permalink to &quot;四种处理死锁的策略&quot;">​</a></h2><ol><li><p>忽略该问题</p></li><li><p>检测死锁并恢复</p></li><li><p>仔细对资源进行分配，动态地避免死锁</p></li><li><p>通过破坏引起死锁的四个必要条件之一， 防止死锁的产生</p></li></ol><h3 id="鸵鸟算法" tabindex="-1">鸵鸟算法 <a class="header-anchor" href="#鸵鸟算法" aria-label="Permalink to &quot;鸵鸟算法&quot;">​</a></h3><ol><li>假装根本没有问题发生</li><li>如果以下假设成立，这种方法是合理的 <ul><li>死锁发生的可能性很小</li><li>预防死锁会付出很大的代价</li></ul></li></ol><h2 id="死锁的检测" tabindex="-1">死锁的检测 <a class="header-anchor" href="#死锁的检测" aria-label="Permalink to &quot;死锁的检测&quot;">​</a></h2><h3 id="每种类型一个资源的死锁检测" tabindex="-1">每种类型一个资源的死锁检测 <a class="header-anchor" href="#每种类型一个资源的死锁检测" aria-label="Permalink to &quot;每种类型一个资源的死锁检测&quot;">​</a></h3><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241215113618892.png" alt="image-20241215113618892"></p><blockquote><ul><li>图中的节点：包括进程节点（圆圈表示）和资源节点（方框表示）。</li><li>边的表示 <ul><li>从进程节点到资源节点的边表示进程对资源的请求。</li><li>从资源节点到进程节点的边表示资源分配给进程。</li></ul></li></ul></blockquote><p><strong>死锁检测过程：</strong></p><ul><li>如果在资源分配图中存在一个由进程和资源节点组成的环（即环路），则说明系统存在死锁。(eg: 从a中抽取的环b)</li><li>如果没有环路，说明系统中不存在死锁。</li></ul><h3 id="每种类型多个资源的死锁检测" tabindex="-1">每种类型多个资源的死锁检测 <a class="header-anchor" href="#每种类型多个资源的死锁检测" aria-label="Permalink to &quot;每种类型多个资源的死锁检测&quot;">​</a></h3><h4 id="四种数据结构" tabindex="-1">四种数据结构 <a class="header-anchor" href="#四种数据结构" aria-label="Permalink to &quot;四种数据结构&quot;">​</a></h4><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241215114210888.png" alt="image-20241215114210888"></p><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20250107212144164.png" alt="image-20250107212144164"></p><p>A=(01021)可满足p2、p3进程需求，这两个进程结束后释放资源，A=（02032）,余下不能满足任意进程需要，故P1、P4存在死锁。</p><h4 id="eg" tabindex="-1">eg <a class="header-anchor" href="#eg" aria-label="Permalink to &quot;eg&quot;">​</a></h4><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241215114246321.png" alt="image-20241215114246321"></p><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241215114902912.png" alt="image-20241215114902912"></p><h2 id="死锁的恢复" tabindex="-1">死锁的恢复 <a class="header-anchor" href="#死锁的恢复" aria-label="Permalink to &quot;死锁的恢复&quot;">​</a></h2><h3 id="通过抢占恢复" tabindex="-1">通过抢占恢复 <a class="header-anchor" href="#通过抢占恢复" aria-label="Permalink to &quot;通过抢占恢复&quot;">​</a></h3><ul><li>在某些情况下，可能会临时将某个资源从它当前所有者那里转移到另一个进程</li><li>该方法是否可行取决于该资源本身的特性</li></ul><h3 id="通过回滚恢复" tabindex="-1">通过回滚恢复 <a class="header-anchor" href="#通过回滚恢复" aria-label="Permalink to &quot;通过回滚恢复&quot;">​</a></h3><ul><li>周期性地对进程进行检查点检查</li><li>该方法就是将进程的状态写入一个文件以备以后重启</li><li>一旦检测到死锁，重新从一个较早的检查点开始重新启动进程</li></ul><h3 id="通过杀死进程恢复" tabindex="-1">通过杀死进程恢复 <a class="header-anchor" href="#通过杀死进程恢复" aria-label="Permalink to &quot;通过杀死进程恢复&quot;">​</a></h3><ul><li>杀掉一个进程</li><li>杀掉死锁环中一个进程</li><li>选择一个环外的进程作为牺牲品以释放该进程的资源</li><li>最好选择可以从头开始重新运行而且不会带来副作用的进程</li></ul><h2 id="死锁避免" tabindex="-1">死锁避免 <a class="header-anchor" href="#死锁避免" aria-label="Permalink to &quot;死锁避免&quot;">​</a></h2><h3 id="安全状态和不安全状态" tabindex="-1">安全状态和不安全状态 <a class="header-anchor" href="#安全状态和不安全状态" aria-label="Permalink to &quot;安全状态和不安全状态&quot;">​</a></h3><blockquote><p>安全状态的定义： 安全状态没有死锁发生，且当所有进程突然请求对 资源的最大需求，此时仍然存在某种调度次序能使得每 个进程执行完毕，则称该装态是安全状态。</p></blockquote><h4 id="eg1-安全状态" tabindex="-1">eg1-安全状态 <a class="header-anchor" href="#eg1-安全状态" aria-label="Permalink to &quot;eg1-安全状态&quot;">​</a></h4><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241215120050344.png" alt="image-20241215120050344"></p><h4 id="eg2-不安全状态" tabindex="-1">eg2-不安全状态 <a class="header-anchor" href="#eg2-不安全状态" aria-label="Permalink to &quot;eg2-不安全状态&quot;">​</a></h4><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241215120108385.png" alt="image-20241215120108385"></p><h3 id="银行家算法" tabindex="-1">银行家算法 <a class="header-anchor" href="#银行家算法" aria-label="Permalink to &quot;银行家算法&quot;">​</a></h3><blockquote><p>银行家算法的基本思想是，在每次资源请求时，系统会检查如果允许该请求，系统是否依然处于“安全状态”。如果系统仍然处于安全状态，则分配资源；如果系统进入不安全状态，则该请求会被拒绝，进程需要等待。</p></blockquote><h4 id="单个资源的银行家算法" tabindex="-1">单个资源的银行家算法 <a class="header-anchor" href="#单个资源的银行家算法" aria-label="Permalink to &quot;单个资源的银行家算法&quot;">​</a></h4><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241215121810066.png" alt="image-20241215121810066"> 三种资源分配状态</p><ul><li>(a)安全</li><li>(b)安全</li><li>(c)不安全</li></ul><h4 id="多个资源的银行家算法" tabindex="-1">多个资源的银行家算法 <a class="header-anchor" href="#多个资源的银行家算法" aria-label="Permalink to &quot;多个资源的银行家算法&quot;">​</a></h4><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241215122719407.png" alt="image-20241215122719407"></p><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241215122643979.png" alt="image-20241215122643979"></p><h5 id="eg-1" tabindex="-1">eg <a class="header-anchor" href="#eg-1" aria-label="Permalink to &quot;eg&quot;">​</a></h5><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241215122828718.png" alt="image-20241215122828718"></p><table tabindex="0"><thead><tr><th></th><th></th><th>P1</th><th>P3</th><th>P0</th><th>P2</th><th>P4</th></tr></thead><tbody><tr><td>A</td><td>3</td><td>5</td><td>7</td><td>7</td><td>10</td><td>10</td></tr><tr><td>B</td><td>3</td><td>3</td><td>4</td><td>5</td><td>5</td><td>5</td></tr><tr><td>C</td><td>2</td><td>2</td><td>3</td><td>5</td><td>5</td><td>7</td></tr></tbody></table><p>序列P1, P3, P0, P2, P4 保证系统在有限的时间 内可收回所有资源</p><h2 id="死锁预防" tabindex="-1">死锁预防 <a class="header-anchor" href="#死锁预防" aria-label="Permalink to &quot;死锁预防&quot;">​</a></h2><h3 id="破坏互斥条件" tabindex="-1">破坏互斥条件 <a class="header-anchor" href="#破坏互斥条件" aria-label="Permalink to &quot;破坏互斥条件&quot;">​</a></h3><ol><li><p>对于一些设备可以采用假脱机技术(例如打印机)</p><ul><li>只有打印机的守护程序可以使用打印机</li><li>不会因打印机而产生死锁</li></ul></li><li><p>不是所有的设备都能够采用假脱机技术</p></li><li><p>原理:</p><ul><li>避免分配那些不是绝对必需的资源–</li><li>尽量做到尽可能少的进程可以真正申请资源</li></ul></li></ol><h3 id="破坏占有且等待条件" tabindex="-1">破坏占有且等待条件 <a class="header-anchor" href="#破坏占有且等待条件" aria-label="Permalink to &quot;破坏占有且等待条件&quot;">​</a></h3><ol><li>规定所有进程在开始执行前申请请求所需的全部资源 <ul><li>进程不会因为中途申请资源而出现等待</li></ul></li><li>出现问题 <ul><li>很多进程直到它运行时才知道它需要多少资源</li><li>资源的利用率将大大下降</li></ul></li><li>少许改变 <ul><li>现暂时释放当前所占有的所有资源</li><li>然后再尝试一次获得所需的所有资源</li></ul></li></ol><h3 id="破坏不可抢占条件" tabindex="-1">破坏不可抢占条件 <a class="header-anchor" href="#破坏不可抢占条件" aria-label="Permalink to &quot;破坏不可抢占条件&quot;">​</a></h3><p>有些资源可以通过虚拟化的方法来避免这个问题（例如磁盘）</p><h3 id="破坏环路等待条件" tabindex="-1">破坏环路等待条件 <a class="header-anchor" href="#破坏环路等待条件" aria-label="Permalink to &quot;破坏环路等待条件&quot;">​</a></h3><h2 id="两阶段锁" tabindex="-1">两阶段锁 <a class="header-anchor" href="#两阶段锁" aria-label="Permalink to &quot;两阶段锁&quot;">​</a></h2><ol><li><p>第一阶段</p><ul><li>进程试图对所有所需的记录进行加锁，一次锁一个记录</li><li>如果需要的记录已经被加锁，那么释放它所有加锁的记录，然后重新开始第一阶段</li><li>(在第一阶段没有做实际的工作)</li></ul></li><li><p>如果第一阶段加锁成功,就开始第二阶段</p></li></ol><ul><li>执行更新</li><li>释放所有的锁</li></ul><h2 id="通信死锁" tabindex="-1">通信死锁 <a class="header-anchor" href="#通信死锁" aria-label="Permalink to &quot;通信死锁&quot;">​</a></h2><ol><li>进程A向进程B发送请求信息，然后阻塞直至B回复</li><li>若请求信息丢失，A将阻塞以等待回复， 而B会阻塞等待一个向其发送命令的请求， 因此发生死锁</li><li>解决办法：超时</li></ol><h2 id="活锁" tabindex="-1">活锁 <a class="header-anchor" href="#活锁" aria-label="Permalink to &quot;活锁&quot;">​</a></h2><ol><li>从现象上看好像死锁发生 <ul><li>两个进程总是消耗完分配给它们的CPU时间， 但是没有进展也没有阻塞</li></ul></li><li>原因 <ul><li>轮询（忙等待）可用于进入临界区或存取资源</li></ul></li></ol><h2 id="饥饿" tabindex="-1">饥饿 <a class="header-anchor" href="#饥饿" aria-label="Permalink to &quot;饥饿&quot;">​</a></h2><ol><li><p>由于分配资源的算法发生</p><ul><li>eg: 短作业优先调度算法</li></ul></li><li><p>系统总是按照算法的条件进行调度，如总是让短作业先运行</p></li><li><p>可能造成长作业总也不能得到运行时间</p></li><li><p>解决方法</p><ul><li>eg: 通过先来先服务资源分配算法避免</li></ul></li></ol><h2 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h2><ol><li><p>死锁的定义</p><ul><li><a href="#定义">定义</a></li></ul></li><li><p>死锁发生的条件</p><ul><li><a href="#发生死锁的四个必要条件">发生死锁的四个必要条件</a></li></ul></li><li><p>解决死锁的方法</p></li><li><p>鸵鸟算法、预防死锁的方法、<strong>避免死锁的方法（银行家算法）</strong>、 <strong>死锁的检测（死锁定理与资源分配图）</strong>、死锁的解除</p><ul><li><a href="#死锁预防">死锁预防</a></li><li><a href="#死锁避免">死锁避免</a></li><li><a href="#死锁的检测">死锁的检测</a></li><li><a href="#死锁的恢复">死锁解除</a></li></ul></li><li><p>操作系统接口</p></li></ol><h2 id="思考题-2" tabindex="-1">思考题 2 <a class="header-anchor" href="#思考题-2" aria-label="Permalink to &quot;思考题 2&quot;">​</a></h2><ol><li>系统处于死锁状态时，至少有多个进程处于该进程集合中？ <ul><li>当系统处于死锁状态时，至少有两个以上的进程（也称为线程）同时等待对方释放资源而无法继续执行，形成了相互依赖的僵局。这些进程都在等待一个不可能发生的事件，即它们所请求的资源被其他进程占用并且不会释放。</li></ul></li><li>系统的死锁状态会给系统带来哪些影响？ <ul><li>资源浪费：陷入死锁的进程不会向前推进，占用的系统资源无法被释放，导致整体资源利用率降低。</li></ul><ol start="2"><li>可用性降低：因为部分进程无法正常运行，可能导致整个系统的可用性和响应时间下降。</li><li>效率下降：处理死锁问题需要特殊的算法，如终止某些进程、回滚操作等，这会增加系统开销。</li><li>容易引发崩溃：长时间的死锁可能会耗尽系统资源，进而引发系统崩溃。</li></ol></li><li>死锁产生的原因有哪些？ <ul><li>进程间的资源竞争：当多个进程争夺有限的系统资源时，如果没有适当的资源分配策略，可能导致死锁。</li></ul><ol start="2"><li>进程顺序申请资源：如果进程按照固定顺序申请资源，并且一旦获取就不再释放直到所有资源都到位，那么就可能形成死锁。</li><li>没有合理的超时机制：若进程对资源的请求永不停止，而其他进程一直等待其释放，也可能造成死锁。</li><li>循环等待：当进程A持有资源B并等待资源C，同时进程B持有资源C并等待资源A，这样的循环会导致死锁。</li></ol></li></ol>',81),r=[o];function h(n,d,s,c,u,p){return i(),l("div",null,r)}const g=a(t,[["render",h]]);export{b as __pageData,g as default};
