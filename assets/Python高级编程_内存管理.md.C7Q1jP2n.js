import{_ as s,c as i,o as a,a6 as n}from"./chunks/framework.DkFL-jqo.js";const c=JSON.parse('{"title":"Python内存管理","description":"","frontmatter":{},"headers":[],"relativePath":"Python高级编程/内存管理.md","filePath":"Python高级编程/内存管理.md"}'),t={name:"Python高级编程/内存管理.md"},h=n(`<h1 id="python内存管理" tabindex="-1">Python内存管理 <a class="header-anchor" href="#python内存管理" aria-label="Permalink to &quot;Python内存管理&quot;">​</a></h1><h2 id="引用计数" tabindex="-1">引用计数 <a class="header-anchor" href="#引用计数" aria-label="Permalink to &quot;引用计数&quot;">​</a></h2><blockquote><p>Python用引用记数跟踪对象引用情况，当对象被引用一次，引用计数+1。引用被删除，计数-1。当计数为0时，说明没有任何引用指向它。这时==垃圾回收机制==会将其所占用的内存释放掉。</p></blockquote><blockquote><p>这时一种简单高效的内存管理方式，但无法解决==循环引用==的问题</p></blockquote><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sys</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#第一次</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#第二次</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a): </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 临时引用第三次</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sys.getrefcount(a)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 临时引用第四次</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(get_count(a)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 4</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sys.getrefcount(a))</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 临时引用第三次 # 3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">del</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 清除第二次的引用</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sys.getrefcount(a)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#  2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#重新赋值</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sys.getrefcount(a)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2</span></span></code></pre></div><h2 id="垃圾回收机制" tabindex="-1">垃圾回收机制 <a class="header-anchor" href="#垃圾回收机制" aria-label="Permalink to &quot;垃圾回收机制&quot;">​</a></h2><blockquote><p>Python的垃圾回收机制采用引用计数机制为主，标记-清除和分代回收机制为辅的策略。其中，标记-清除机制用来解决计数引用带来的循环引用而无法释放内存的问题，分代回收机制是为提升垃圾回收的效率。</p></blockquote>`,7),l=[h];function p(k,e,r,d,o,E){return a(),i("div",null,l)}const g=s(t,[["render",p]]);export{c as __pageData,g as default};
