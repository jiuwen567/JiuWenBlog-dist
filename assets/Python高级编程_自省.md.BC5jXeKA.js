import{_ as t,c as s,o as i,a6 as a}from"./chunks/framework.DkFL-jqo.js";const c=JSON.parse('{"title":"自省与反射","description":"","frontmatter":{},"headers":[],"relativePath":"Python高级编程/自省.md","filePath":"Python高级编程/自省.md"}'),e={name:"Python高级编程/自省.md"},h=a(`<h1 id="自省与反射" tabindex="-1">自省与反射 <a class="header-anchor" href="#自省与反射" aria-label="Permalink to &quot;自省与反射&quot;">​</a></h1><p>参考：</p><blockquote><p><a href="https://www.cnblogs.com/Rachel-84351228/p/15975309.html" target="_blank" rel="noreferrer">Python 自省与反射 - Rachel_0226 - 博客园 (cnblogs.com)</a></p></blockquote><h2 id="自省理解" tabindex="-1">自省理解 <a class="header-anchor" href="#自省理解" aria-label="Permalink to &quot;自省理解&quot;">​</a></h2><blockquote><ul><li><p>Python的自省：Python运行的时候知道对象自身有哪些东西</p></li><li><p>In computing, <strong>type introspection</strong> is the ability of a program to examine the type or properties of an object at runtime. Some programming languages possess this capability.</p></li><li><p>在计算机科学中，内省是指计算机程序在运行时（Run time）检查对象（Object）类型（以及属性等）的一种能力，通常也可以称作运行时类型检查</p></li></ul></blockquote><h3 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h3><table tabindex="0"><thead><tr><th>方法</th><th>作用</th><th>类型</th></tr></thead><tbody><tr><td>help()</td><td>查看函数或者模块用途的详细说明</td><td>自省</td></tr><tr><td><strong>dir()</strong></td><td><strong>返回对象所有属性</strong></td><td>自省</td></tr><tr><td><strong>type()</strong></td><td><strong>查看对象类型</strong></td><td>自省</td></tr><tr><td><strong>isinstance()</strong></td><td><strong>判断一个对象是否是一个已知的类型</strong></td><td>自省</td></tr><tr><td>issubclass()</td><td>判断一个类是不是另一个类的子类</td><td>自省</td></tr><tr><td>id()</td><td>返回地址值</td><td>自省</td></tr><tr><td>callable()</td><td>判断对象是否可调用</td><td>自省</td></tr></tbody></table><h2 id="反射理解" tabindex="-1">反射理解 <a class="header-anchor" href="#反射理解" aria-label="Permalink to &quot;反射理解&quot;">​</a></h2><blockquote><ul><li>Introspection should not be confused with <strong>reflection</strong>, which goes a step further and is the ability for a program to manipulate the values, meta-data, properties and/or functions of an object at runtime.</li><li>也就是说自省和反射不是同一回事，自省是获取对象类型的能力，而反射是操纵对象的值，元数据，属性和/或函数的能力。</li><li>在计算机学中，反射（英语：reflection）是指计算机程序在运行时（runtime）可以访问、检测和修改它本身状态或行为的一种能力。用比喻来说，<strong>反射就是程序在运行的时候能够“观察”并且修改自己的行为</strong>。</li><li>在Python中反射非常简单，用起来几乎感觉不到与其他的代码有区别，使用反射获取到的函数和方法可以像平常一样加上括号直接调用，获取到类后可以直接构造实例；不过获取到的字段不能直接赋值，因为拿到的其实是另一个指向同一个地方的引用，赋值只能改变当前的这个引用而已。</li></ul></blockquote><h2 id="方法-1" tabindex="-1">方法 <a class="header-anchor" href="#方法-1" aria-label="Permalink to &quot;方法&quot;">​</a></h2><table tabindex="0"><thead><tr><th>方法</th><th>作用</th><th>类型</th></tr></thead><tbody><tr><td>hasattr()</td><td>判断类方法或者类属性是否存在，返回一个布尔值，存在返回True，反之返回Flase</td><td>反射</td></tr><tr><td>getattr()</td><td>获取属性值或实例方法，如果其不存在，会抛出一个<code>AttributeError</code>异常</td><td>反射</td></tr><tr><td>setattr()</td><td>设置实例属性的值，如果实例属性不存在时，会自动给当前实例添加该属性</td><td>反射</td></tr><tr><td>delattr()</td><td>删除实例的属性或者实例的方法，当其不存在时同样会抛出一个<code>AttributeError</code>异常</td><td>反射</td></tr></tbody></table><h2 id="案例" tabindex="-1">案例 <a class="header-anchor" href="#案例" aria-label="Permalink to &quot;案例&quot;">​</a></h2><blockquote><p>判断对象是否为可迭代对象</p></blockquote><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hasattr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;__iter__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># True</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hasattr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;__iter__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># True</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hasattr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;__iter__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># True</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hasattr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;__iter__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># False</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div>`,14),n=[h];function r(l,d,p,o,k,E){return i(),s("div",null,n)}const y=t(e,[["render",r]]);export{c as __pageData,y as default};
