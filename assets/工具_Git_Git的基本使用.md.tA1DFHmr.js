import{_ as i,c as s,o as a,a6 as t}from"./chunks/framework.DkFL-jqo.js";const u=JSON.parse('{"title":"Git的使用","description":"","frontmatter":{},"headers":[],"relativePath":"工具/Git/Git的基本使用.md","filePath":"工具/Git/Git的基本使用.md"}'),e={name:"工具/Git/Git的基本使用.md"},l=t(`<h1 id="git的使用" tabindex="-1">Git的使用 <a class="header-anchor" href="#git的使用" aria-label="Permalink to &quot;Git的使用&quot;">​</a></h1><h2 id="linux下载" tabindex="-1">Linux下载 <a class="header-anchor" href="#linux下载" aria-label="Permalink to &quot;Linux下载&quot;">​</a></h2><ul><li>安装：<code> sudo apt-get install git</code></li><li>查看版本核实是否安装成功: <code> git --version</code></li><li>查看帮助：<code> git --help</code></li><li>查看当前文件夹全部内容：<code>la</code></li><li>创建py文件：<code>vim test.py</code>=&gt;<code>:wq</code>退出编辑</li><li>查看文件里的内容：<code>cat test.py</code></li><li>往test.py里追加内容<code>echo print(&quot;hello&quot; &gt;&gt; test.py)</code></li></ul><h2 id="初始化仓库并做最简单的配置" tabindex="-1">初始化仓库并做最简单的配置 <a class="header-anchor" href="#初始化仓库并做最简单的配置" aria-label="Permalink to &quot;初始化仓库并做最简单的配置&quot;">​</a></h2><ul><li><p>cmd终端中进入想要存储代码的文件夹</p></li><li><p>cd 到文件夹</p></li><li><p>使用<code>git init</code>初始化仓库 --》在当前目录下初始化本地仓库，即生成版本库(.git目录）</p></li><li><p><code> git config --global user.name &quot;jiuwen567&quot;</code>创建用户名</p></li><li><p><code>git config --global user.email &quot;2750826557@qq.com&quot;</code>配置邮箱</p></li><li><p><code>git config --global --list</code>查看用户名和邮箱相关信息</p></li></ul><h2 id="设置工作区、暂存区和仓库" tabindex="-1">设置工作区、暂存区和仓库 <a class="header-anchor" href="#设置工作区、暂存区和仓库" aria-label="Permalink to &quot;设置工作区、暂存区和仓库&quot;">​</a></h2><ul><li><p>使用<code>git status</code>检测当前文件夹(需含有.git文件)状态--》增加或者删除某些东西==工作区==</p></li><li><p>使用<code>git add .</code>提交当前改变所有的东西(git status检测到的所有东西)或者使用<code>git add &quot;文件名&quot;</code>提交单个文件的改动==暂存区==</p></li><li><p>使用<code>git commit -m &quot;自己对当前改动的解释&quot;</code>==提交git仓库==</p><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/5ec5f381128ed75337ddd23e871e62c9.png" alt="image-20230126211456124"></p></li><li><p>使用<code>git commit -am &quot;自己对当前改动的解释&quot;</code>==直接提交到git仓库，不经过暂存区==</p></li></ul><h2 id="查看历史提交记录" tabindex="-1"><strong>查看历史提交记录</strong> <a class="header-anchor" href="#查看历史提交记录" aria-label="Permalink to &quot;**查看历史提交记录**&quot;">​</a></h2><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">log</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git reflog# 查看每个版本对应的 SHA</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 值和操作信息，以便我们进行代码回滚或者撤销等操作。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># git reflog 可以查看所有分支的所有操作记录（包括commit和reset的操作），包括已经被删除的commit记录，git log不能查看已经删除了的commit记录</span></span></code></pre></div><h2 id="切换版本" tabindex="-1">切换版本 <a class="header-anchor" href="#切换版本" aria-label="Permalink to &quot;切换版本&quot;">​</a></h2><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git reset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hard </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \`SHA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">1哈希值\`</span></span></code></pre></div><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/fcf4e82362511abf4a1e23a98e17fba1.png" alt="image-20230603170448634"></p><p>黄色值对应响应版本SHA-1哈希值</p><h2 id="git-分支管理" tabindex="-1">Git 分支管理 <a class="header-anchor" href="#git-分支管理" aria-label="Permalink to &quot;Git 分支管理&quot;">​</a></h2><p>几乎每一种版本控制系统都以某种形式支持分支，一个分支代表一条独立的开发线。</p><p>使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。</p><p>Git 分支实际上是指向更改快照的指针。</p><p>有人把 Git 的分支模型称为<strong>必杀技特性</strong>，而正是因为它，将 <strong>Git</strong> 从版本控制系统家族里区分出来。</p><ul><li>创建分支命令：</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git branch (branchname)</span></span>
<span class="line"><span>git branch –v # 显示当前版本及备注</span></span></code></pre></div><ul><li>切换分支命令:</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git checkout (branchname)</span></span></code></pre></div><blockquote><p>当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。</p></blockquote><ul><li>创建并切换到新分支</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git checkout -b &lt;new-branch-name&gt;</span></span></code></pre></div><ul><li>合并分支命令:</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git merge</span></span></code></pre></div><ul><li><p><strong>合并冲突</strong></p><blockquote><p>合并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改，git无法替我们决定使用哪一个，必须人为决定新代码内容</p></blockquote></li></ul><h2 id="将本地仓库同步到github-gitee" tabindex="-1">将本地仓库同步到GitHub&amp;Gitee <a class="header-anchor" href="#将本地仓库同步到github-gitee" aria-label="Permalink to &quot;将本地仓库同步到GitHub&amp;Gitee&quot;">​</a></h2><h3 id="github" tabindex="-1">GitHub <a class="header-anchor" href="#github" aria-label="Permalink to &quot;GitHub&quot;">​</a></h3><ul><li><p>创建仓库</p><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git remote </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> origin git@github.com:jiuwen567/learn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git.git</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git branch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">M main</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git push </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">u origin main</span></span></code></pre></div></li><li><p>配置公钥</p><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/e7950f390942d840d654ec735b3250fa.png" alt="image-20230126213555784"></p></li><li><p>获取公钥</p><ol><li>cmd中通过命令<code>ssh-keygen</code>再三次回车得到公钥</li><li>再进入到<code>.ssh</code>文件通过<code>explorer .</code>记事本打开<code>id_rsa.pub</code>查看公钥</li><li>复制粘贴公钥</li></ol></li><li><p>将本地仓库推送给远程GitHub仓库</p><p>终端输入：</p><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git remote </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> origin git@github.com:jiuwen567/learn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git.git</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git branch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">M main</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git push </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">u origin main</span></span></code></pre></div><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/3ebd79dbc35ea5a32b08cf1cb003eece.png" alt="image-20230126220506109"></p></li></ul><h3 id="gitee-以linux系统为例" tabindex="-1">Gitee(以Linux系统为例) <a class="header-anchor" href="#gitee-以linux系统为例" aria-label="Permalink to &quot;Gitee(以Linux系统为例)&quot;">​</a></h3><ul><li></li><li><p>配置公钥</p><ol><li><p><code>ssh-keygen -t rsa -C + 邮箱名</code></p></li><li><p>进入.ssh查看公钥</p></li><li><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/1463f1d5fb1a00b066d31e4a8639fea2.png" alt="image-20230603191612715"></p></li><li><p><code>la查看.ssh目录</code></p></li><li><p><code>cat id_rsa_pub</code>查看公钥</p></li><li><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/af6583d3de1762ff3b895e36fa9833af.png" alt="image-20230603191748750"></p></li></ol></li><li><p>粘贴公钥</p></li><li><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/23ddf2e0d2a78743b894fe56317545e8.png" alt="image-20230603192509564"></p></li><li><p>测试是否配置成功：<code>ssh –T git@gitee.com</code></p></li><li><p>查看远程仓库：<code>git remote -v</code></p></li><li><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/22785f45c1bdc9ff776d039fc3316868.png" alt="image-20230603200654144"></p></li><li><p>origin可增加名字=》<code>git remote add +更名 +远程仓库地址 </code></p></li><li><p>将本地仓库推送给远程Gitee仓库</p></li><li><p>终端输入：</p><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git remote </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gitee git@gitee.com:jiuwen567/learn_git.git # 配置远程仓库，克隆的仓库就不用配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git push </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">u gitee main # 将数据传送到远程仓库</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git pull # 拉取远程仓库数据</span></span></code></pre></div><ul><li>注意GitHub中的origin可以随意替换如果在两个平台同时创建则origin需要替换成不同的值</li></ul></li></ul><h2 id="克隆别人仓库" tabindex="-1">克隆别人仓库 <a class="header-anchor" href="#克隆别人仓库" aria-label="Permalink to &quot;克隆别人仓库&quot;">​</a></h2><ul><li><p><code>git clone +&#39;Http地址或ssh地址&#39;</code></p></li><li><p><code>git remote -v</code>查看远程仓库</p></li><li><p><code>git fetch origin master:temp</code>从远程获取最新版本到本地</p></li><li><p><code>git diff temp</code>比较本地的仓库与远程仓库的区别</p></li><li><p><code>git pull</code>更新本地仓库</p></li></ul><h2 id="拉取分支代码" tabindex="-1">拉取分支代码 <a class="header-anchor" href="#拉取分支代码" aria-label="Permalink to &quot;拉取分支代码&quot;">​</a></h2><div class="language-crmsh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">crmsh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git clone -b &lt;分支名&gt; &lt;仓库地址&gt;</span></span>
<span class="line"><span>git push -u origin &lt;branch-name&gt; # 推送新分支到远程仓库</span></span></code></pre></div>`,37),n=[l];function p(o,h,c,d,g,r){return a(),s("div",null,n)}const m=i(e,[["render",p]]);export{u as __pageData,m as default};
