import{_ as i,c as a,o as s,a6 as l}from"./chunks/framework.DkFL-jqo.js";const g=JSON.parse('{"title":"操作系统的概念","description":"","frontmatter":{},"headers":[],"relativePath":"八股/操作系统/操作系统概述及基本概念.md","filePath":"八股/操作系统/操作系统概述及基本概念.md"}'),e={name:"八股/操作系统/操作系统概述及基本概念.md"},n=l(`<h1 id="操作系统的概念" tabindex="-1">操作系统的概念 <a class="header-anchor" href="#操作系统的概念" aria-label="Permalink to &quot;操作系统的概念&quot;">​</a></h1><h2 id="操作系统的定义" tabindex="-1">操作系统的定义 <a class="header-anchor" href="#操作系统的定义" aria-label="Permalink to &quot;操作系统的定义&quot;">​</a></h2><p>操作系统是一组控制和管理计算机软、硬件资源， 合理组织计算机工作流程，以及方便用户的程序的集合</p><h3 id="理解" tabindex="-1">理解 <a class="header-anchor" href="#理解" aria-label="Permalink to &quot;理解&quot;">​</a></h3><ul><li><p>一个扩展了的机器</p><ul><li>提供方便接口，隐藏硬件细节。</li></ul></li><li><p>资源管理器</p><ul><li>实现多道程序，多用户的资源管理</li></ul></li></ul><h2 id="操作系统的历史" tabindex="-1">操作系统的历史 <a class="header-anchor" href="#操作系统的历史" aria-label="Permalink to &quot;操作系统的历史&quot;">​</a></h2><h3 id="真空管、插板-手工操作、无操作系统-阶段" tabindex="-1">真空管、插板（手工操作、无操作系统）阶段 <a class="header-anchor" href="#真空管、插板-手工操作、无操作系统-阶段" aria-label="Permalink to &quot;真空管、插板（手工操作、无操作系统）阶段&quot;">​</a></h3><h3 id="电子管、批处理系统阶段" tabindex="-1">电子管、批处理系统阶段 <a class="header-anchor" href="#电子管、批处理系统阶段" aria-label="Permalink to &quot;电子管、批处理系统阶段&quot;">​</a></h3><ul><li>单道批处理系统 <ul><li>每次只调入一个作业进入内存，并运行。</li></ul></li><li>多道批处理系统 <ul><li>每次可调入多个作业进入内存并运行。</li></ul></li></ul><h3 id="集成电路、多道程序-分时-系统" tabindex="-1">集成电路、多道程序（分时）系统 <a class="header-anchor" href="#集成电路、多道程序-分时-系统" aria-label="Permalink to &quot;集成电路、多道程序（分时）系统&quot;">​</a></h3><h3 id="现代操作系统" tabindex="-1">现代操作系统 <a class="header-anchor" href="#现代操作系统" aria-label="Permalink to &quot;现代操作系统&quot;">​</a></h3><h2 id="操作系统的分类" tabindex="-1">操作系统的分类 <a class="header-anchor" href="#操作系统的分类" aria-label="Permalink to &quot;操作系统的分类&quot;">​</a></h2><h3 id="批处理系统" tabindex="-1">批处理系统 <a class="header-anchor" href="#批处理系统" aria-label="Permalink to &quot;批处理系统&quot;">​</a></h3><p>特点：</p><ol><li>脱机使用，无交互性</li><li>成批处理，作业周转时间长</li><li>多道批处理具有高的资源利用率和大的吞吐量</li></ol><h3 id="分时系统" tabindex="-1">分时系统 <a class="header-anchor" href="#分时系统" aria-label="Permalink to &quot;分时系统&quot;">​</a></h3><p>特点：</p><ol><li>交互性</li><li>多路性</li><li>独立性</li><li>及时性</li></ol><h3 id="实时系统" tabindex="-1">实时系统 <a class="header-anchor" href="#实时系统" aria-label="Permalink to &quot;实时系统&quot;">​</a></h3><p>特点：</p><ol><li>事件驱动</li><li>及时性</li><li>高可靠性</li><li>(也具有独立性，交互性，多路性)</li></ol><h3 id="通用操作系统及个人操作系统" tabindex="-1">通用操作系统及个人操作系统 <a class="header-anchor" href="#通用操作系统及个人操作系统" aria-label="Permalink to &quot;通用操作系统及个人操作系统&quot;">​</a></h3><h3 id="嵌入式操作系统" tabindex="-1">嵌入式操作系统 <a class="header-anchor" href="#嵌入式操作系统" aria-label="Permalink to &quot;嵌入式操作系统&quot;">​</a></h3><h3 id="网络操作系统" tabindex="-1">网络操作系统 <a class="header-anchor" href="#网络操作系统" aria-label="Permalink to &quot;网络操作系统&quot;">​</a></h3><p>特点：</p><ol><li>互连的计算机系统分布在不同地域</li><li>各计算机有自己独立的ＯＳ</li><li>利用网络通信达到资源共享，信息交换，互操作及协处理</li></ol><h3 id="分布式操作系统" tabindex="-1">分布式操作系统 <a class="header-anchor" href="#分布式操作系统" aria-label="Permalink to &quot;分布式操作系统&quot;">​</a></h3><p>特点：</p><ol><li>以网络为基础</li><li>统一性</li><li>透明性</li></ol><h2 id="操作系统的功能" tabindex="-1">操作系统的功能 <a class="header-anchor" href="#操作系统的功能" aria-label="Permalink to &quot;操作系统的功能&quot;">​</a></h2><ul><li>处理机管理：进程控制、同步、通信，处理机调度</li><li>存储器管理：内存分配，内存保护，地址映射，内存扩充 ．</li><li>设备管理：缓冲管理，设备分配，设备处理（驱动程序）</li><li>文件管理：外存管理，目录管理，文件的读/写和保护</li><li>用户接口：系统调用（程序接口），命令接口，图形接口 。</li><li>作业管理：作业组织，调度</li></ul><h2 id="计算机的组成" tabindex="-1">计算机的组成 <a class="header-anchor" href="#计算机的组成" aria-label="Permalink to &quot;计算机的组成&quot;">​</a></h2><h3 id="处理器" tabindex="-1">处理器 <a class="header-anchor" href="#处理器" aria-label="Permalink to &quot;处理器&quot;">​</a></h3><p>工作模式:</p><ul><li>内核模式（核心态）:CPU可以执行指令集中的所有指令，并使用硬件的每种功能。</li><li>用户模式（用户态）:仅仅允许执行指令集的一个子集和访问所有功能的一个子集。</li></ul><h3 id="存储器" tabindex="-1">存储器 <a class="header-anchor" href="#存储器" aria-label="Permalink to &quot;存储器&quot;">​</a></h3><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241202115614341.png" alt="image-20241202115614341"></p><h3 id="i-o设备" tabindex="-1">I/O设备 <a class="header-anchor" href="#i-o设备" aria-label="Permalink to &quot;I/O设备&quot;">​</a></h3><h2 id="系统启动" tabindex="-1">系统启动 <a class="header-anchor" href="#系统启动" aria-label="Permalink to &quot;系统启动&quot;">​</a></h2><p>系统启动即是将操作系统读入内存的工作。</p><ul><li><p>实模式：16位实模式，为绝对地址。支持一个20位的存储地址空间，无分页 机制和实时多任务概念；</p></li><li><p>保护模式：引入段模式、页模式，并为段模式提供保护机制，也就说一个段 的描述符需要规定对自身的访问权限（Access）。为此引入了GDT（LDT）， 用以实现分段管理，达到32位/64位寻址空间；</p></li></ul><p>过程：</p><ul><li><p>启动BIOS，准备实模式下的中断向量表及中断服务程序</p></li><li><p>加载操作系统内核程序并为保护模式做准备</p></li><li><p>进入保护模式，为main函数的调用做准备</p></li><li><p>内核初始化</p></li><li><p>生成init进程</p></li><li><p>系统初始化，shell命令文本的执行</p></li><li><p>生成各终端进程</p></li></ul><h2 id="用户接口" tabindex="-1">用户接口 <a class="header-anchor" href="#用户接口" aria-label="Permalink to &quot;用户接口&quot;">​</a></h2><ul><li><h3 id="命令接口" tabindex="-1">命令接口 <a class="header-anchor" href="#命令接口" aria-label="Permalink to &quot;命令接口&quot;">​</a></h3><p>提供给用户命令的方式控制系统运行</p><p>常用shell命令接口：</p><ul><li>系统访问：login, logout, exit</li><li>编辑和文件管理：vi, cat, pr, cp, mv, rm</li><li>目录操作命令：ls, mkdir, pwd, cd, rmdir, chmod <ul><li>eg. $chmod go+rw file</li></ul></li><li>编译，链接命令：cc, link</li><li>日期命令：date</li></ul><p>特殊命令：</p><ul><li><p>后台命令：＆</p><ul><li>eg. <code>$cc a.c&amp; ．</code></li></ul></li><li><p><code>文件名通配符：＊，？ </code></p></li><li><p><code>重定向符号：＜， ＞，＞＞</code></p></li><li><p>eg. $a&gt;b $a**&gt;b ．**</p></li><li><p>管道命令：<code>｜</code></p><ul><li>一个命令的执行结果直接放入系统缓冲区，作为下一个命令 的输入。</li></ul></li><li><p>率波器命令：grep, sort</p></li></ul></li><li><h3 id="系统调用-程序接口" tabindex="-1">系统调用（程序接口） <a class="header-anchor" href="#系统调用-程序接口" aria-label="Permalink to &quot;系统调用（程序接口）&quot;">​</a></h3><p>用户程序使用该接口访问系统资源，从而获取 操作系统服务。</p><h4 id="常用系统调用" tabindex="-1">常用系统调用 <a class="header-anchor" href="#常用系统调用" aria-label="Permalink to &quot;常用系统调用&quot;">​</a></h4><p>与设备有关的系统调用： open, close, read, write</p><p>与文件系统有关的系统调用： open, close, read, write, creat, unlink</p><p>与进程控制有关的系统调用： fork, wait, exit, getpid, getppid, getpriority, nice, kill, signal, pause, pipe，lockf</p><h4 id="系统调用fork示例-linux或macos" tabindex="-1">系统调用fork示例（Linux或macos） <a class="header-anchor" href="#系统调用fork示例-linux或macos" aria-label="Permalink to &quot;系统调用fork示例（Linux或macos）&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i ;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  ;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(“i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d\\n”,i);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ( i ) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(“It is a parent process</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\n”);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(“It is a child process</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\n”);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>fork()返回值：</p><ul><li>－１；创建子进程失败</li><li>０；返回到子进程中执行</li><li>＞０；返回</li></ul><p>在使用 <code>fork()</code> 创建子进程时，父进程和子进程是 <strong>并发执行</strong> 的，它们各自独立运行。<strong>谁先执行</strong> 取决于操作系统的调度器，它会根据当前的系统负载、进程优先级、CPU 调度策略等因素来决定哪个进程先执行</p><blockquote><p><strong>父进程</strong>和<strong>子进程</strong>都是由<code>fork()</code>创建的。<code>fork()</code>函数会返回两次：</p><ul><li>在父进程中，<code>fork()</code> 返回一个大于 0 的值（即子进程的 PID）。</li><li>在子进程中，<code>fork()</code> 返回 0。</li></ul></blockquote></li><li><p>Linux下实际代码</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;unistd.h&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 引入 fork() 函数定义</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  ;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 直到fork成功为止，若失败继续尝试</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;i=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;It is a parent process! pid: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getpid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;It is a child process! pid: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getpid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241204144629105.png" alt="image-20241204144629105"></p></li><li><h3 id="图形用户接口" tabindex="-1">图形用户接口 <a class="header-anchor" href="#图形用户接口" aria-label="Permalink to &quot;图形用户接口&quot;">​</a></h3><ul><li>为用户提供的图形化的操作界面</li></ul></li></ul><h1 id="中英名词对照" tabindex="-1">中英名词对照 <a class="header-anchor" href="#中英名词对照" aria-label="Permalink to &quot;中英名词对照&quot;">​</a></h1><ul><li>IR instruction register 指令寄存器</li><li>AR address register 地址寄存器</li><li>ALU arithmetic and logic unit 算术逻辑单元</li><li>MAR Memory Address Register 地址寄存器</li><li>MBR Memory Buffer Register 存储器缓冲寄存器</li><li>ISA Industry Standard Architecture 工业标准体系结构</li><li>cat catenate 链接文本文件</li><li>pwd 将当前目录的全路径名称（从根目录）写入标准输出</li><li>CMS conversational monitor system 会话监控系统</li><li>BIOS Basic Input Output System 基本输入输出系统</li></ul><h1 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h1><ol><li><p>操作系统的定义</p><ul><li><a href="#操作系统的定义">定义</a></li></ul></li><li><p>操作系统在计算机系统中的位置和作用</p><ul><li><p>位置：位于硬件和应用软件之间。</p><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20250101191520719.png" alt="image-20250101191520719"></p></li><li><p><a href="#操作系统的功能">作用</a></p></li></ul></li><li><p>多道程序；<strong>并发与并行的区别</strong></p><ul><li><p>多道程序</p><ul><li>同时处理多个具有独立功能的程序</li><li>应具有以下特点： <ul><li>独立性：多个程序逻辑独立，并可独立运行</li><li>随机性：多用户环境下程序的运行是随机的</li><li>资源共享</li></ul></li></ul></li><li><p>并发：两个或多个事件在同一个时间间隔之内同时发生</p></li><li><p>并行：两个或多个事件在同一个时刻同时发生</p></li></ul></li><li><p><strong>基本操作系统类型及其特点（批处理，分时，实时）</strong></p><ul><li><a href="#批处理系统">批处理</a></li><li><a href="#分时系统">分时</a></li><li><a href="#实时系统">实时</a></li></ul></li><li><p>网络操作系统与分布式操作系统的各自特点和相互联系</p><ul><li><a href="#网络操作系统">网络操作系统</a></li><li><a href="#分布式操作系统">分布式操作系统</a></li><li>二者区别（协议，透明，协作）</li></ul></li><li><p>操作系统的特征</p></li><li><p><strong>操作系统的功能</strong></p><ul><li><a href="#操作系统的功能">功能</a></li></ul></li><li><p>操作系统的几种设计结构及其特点</p></li><li><p>操作系统的运行模式：内核态(核心态、管态）、用户态(目态)的各自特点</p><ul><li><a href="#处理器">特点</a></li></ul></li></ol>`,49),t=[n];function h(p,r,k,o,d,c){return s(),a("div",null,t)}const E=i(e,[["render",h]]);export{g as __pageData,E as default};
