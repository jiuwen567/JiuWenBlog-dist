import{_ as a,c as e,o as i,a6 as t}from"./chunks/framework.DkFL-jqo.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"八股/汇编/寄存器.md","filePath":"八股/汇编/寄存器.md"}'),l={name:"八股/汇编/寄存器.md"},r=t('<h2 id="通用寄存器" tabindex="-1">通用寄存器 <a class="header-anchor" href="#通用寄存器" aria-label="Permalink to &quot;通用寄存器&quot;">​</a></h2><h3 id="数据寄存器" tabindex="-1">数据寄存器 <a class="header-anchor" href="#数据寄存器" aria-label="Permalink to &quot;数据寄存器&quot;">​</a></h3><h4 id="ax" tabindex="-1">AX <a class="header-anchor" href="#ax" aria-label="Permalink to &quot;AX&quot;">​</a></h4><p>累加寄存器，该寄存器存取速度为CPU通用寄存器中之最，因此AX常用作累加结果的存放处，也被称为累加器；</p><h4 id="bx" tabindex="-1">BX <a class="header-anchor" href="#bx" aria-label="Permalink to &quot;BX&quot;">​</a></h4><p>基址寄存器，当间接寻址时16位的BX寄存器作为基地址的专用存放处；</p><h4 id="cx" tabindex="-1">CX <a class="header-anchor" href="#cx" aria-label="Permalink to &quot;CX&quot;">​</a></h4><p>计数寄存器，循环操作时CX中存放的是循环次数记录值；</p><h4 id="dx" tabindex="-1">DX <a class="header-anchor" href="#dx" aria-label="Permalink to &quot;DX&quot;">​</a></h4><p>数据寄存器，在I/O端口间接寻址当中，16位的DX寄存器存放I/O的间接地址，此外，DX还存储32位运算（两个16位相乘）中结果的高16位。</p><h3 id="基址寄存器-bp" tabindex="-1">基址寄存器（BP） <a class="header-anchor" href="#基址寄存器-bp" aria-label="Permalink to &quot;基址寄存器（BP）&quot;">​</a></h3><p>基址寄存器顾名思义是专用（间接寻址）时用于存放段基地址（逻辑段段首地址）所用，在通用时BP中存放的是数据，不可以拆分为两个8位寄存器。</p><p>基址指针、常常用作SS段中堆栈中的数据指针。</p><h3 id="栈顶指针寄存器-sp" tabindex="-1">栈顶指针寄存器（SP) <a class="header-anchor" href="#栈顶指针寄存器-sp" aria-label="Permalink to &quot;栈顶指针寄存器（SP)&quot;">​</a></h3><p>当程序中使用堆栈区时，SP中存放的16位二进制数据为指向堆栈段栈顶的地址，在通用时SP中存放的是数据，不可以拆分为两个8位寄存器。</p><p>堆栈指针、用于SS段中的堆栈指针以指示栈顶存储单元；</p><h3 id="变址寄存器-si、di" tabindex="-1">变址寄存器（SI、DI） <a class="header-anchor" href="#变址寄存器-si、di" aria-label="Permalink to &quot;变址寄存器（SI、DI）&quot;">​</a></h3><p>变址寄存器中存放的地址可以指向代码段、数据段、附加段中的任意位置，不存放专用地址，因此也被称为变址寄存器。在通用时SI和DI中存放的是数据，不可以拆分为两个8位寄存器。</p><p>SI：源变址寄存器、可以用作串操作的源指 针，一般是指向DS段中的数据指针；</p><p>DI：目的变址寄存器、可以用作串操作的目 的指针，一般是指向ES段中数据指针；</p><h2 id="标志寄存器" tabindex="-1">标志寄存器 <a class="header-anchor" href="#标志寄存器" aria-label="Permalink to &quot;标志寄存器&quot;">​</a></h2><p><img src="https://typora5672.oss-cn-chengdu.aliyuncs.com/temp/image-20241125113605992.png" alt="image-20241125113605992"></p><h3 id="状态标志" tabindex="-1">状态标志 <a class="header-anchor" href="#状态标志" aria-label="Permalink to &quot;状态标志&quot;">​</a></h3><h4 id="_1-cf-进位-借位标志" tabindex="-1">(1)CF(进位/借位标志) <a class="header-anchor" href="#_1-cf-进位-借位标志" aria-label="Permalink to &quot;(1)CF(进位/借位标志)&quot;">​</a></h4><p>C标志经常用于记录加/减运算之后结果最高位的进位值/借位 值； 移位指令中保存最后移出的二进制位。</p><h4 id="_2-af-辅助进位-借位标志" tabindex="-1">(2)AF(辅助进位/借位标志) <a class="header-anchor" href="#_2-af-辅助进位-借位标志" aria-label="Permalink to &quot;(2)AF(辅助进位/借位标志)&quot;">​</a></h4><p>A标志又称为半进位/半借位标志。在加减运算过程中，如果 最低4位向更高位产生进位/借位，则A标志置1，否则置0。 主要用于BCD码运算过程。</p><h4 id="_3-sf-符号标志" tabindex="-1">(3)SF(符号标志) <a class="header-anchor" href="#_3-sf-符号标志" aria-label="Permalink to &quot;(3)SF(符号标志)&quot;">​</a></h4><ul><li>S标志根据运算结果的最高位进行设置。</li><li>对于有符号数，用于表示运算结果的符号，0表示结果为正 数，1表示运算结果为负数；</li><li>对于无符号数无意义。</li></ul><h4 id="_4-zf-全零标志" tabindex="-1">(4)ZF(全零标志) <a class="header-anchor" href="#_4-zf-全零标志" aria-label="Permalink to &quot;(4)ZF(全零标志)&quot;">​</a></h4><ul><li>Z标志表示运算结果是否为零，如果为零则置1，否则置0。</li></ul><h4 id="_5-pf-奇偶标志" tabindex="-1">(5)PF(奇偶标志) <a class="header-anchor" href="#_5-pf-奇偶标志" aria-label="Permalink to &quot;(5)PF(奇偶标志)&quot;">​</a></h4><p>P标志表示运算结果中低8位二进制数中1的个数是否为偶数， 是则偶数P标志置1，否则置0。</p><h4 id="_6-of-溢出标志" tabindex="-1">(6)OF(溢出标志) <a class="header-anchor" href="#_6-of-溢出标志" aria-label="Permalink to &quot;(6)OF(溢出标志)&quot;">​</a></h4><ul><li>设置规则：以加法为例：</li></ul><p>①两个加数的最高位相同；</p><p>②且与结果的最高位相反：则OF置1，否则清0。</p><ul><li><p>对于有符号数，指令结束之后如果OF为1，说明运算结果出 错。</p></li><li><p>对于无符号数无意义。</p></li></ul><h3 id="控制标志" tabindex="-1">控制标志 <a class="header-anchor" href="#控制标志" aria-label="Permalink to &quot;控制标志&quot;">​</a></h3><h4 id="_7-方向标志df" tabindex="-1">(7)方向标志DF <a class="header-anchor" href="#_7-方向标志df" aria-label="Permalink to &quot;(7)方向标志DF&quot;">​</a></h4><p>CPU在执行串操作指令时，控制字符串指针 (SI / DI)的自动变化的情况：</p><p>•DF为0时，自动增加调整，否则进行减址调整。</p><h4 id="_8-中断允许标志if" tabindex="-1">(8)中断允许标志IF <a class="header-anchor" href="#_8-中断允许标志if" aria-label="Permalink to &quot;(8)中断允许标志IF&quot;">​</a></h4><p>IF标志控制CPU是否响应来自引脚INTR的可 屏蔽中断请求。</p><p>IF为1，CPU响应可屏蔽中断，否则不响应。</p><h2 id="段寄存器" tabindex="-1">段寄存器 <a class="header-anchor" href="#段寄存器" aria-label="Permalink to &quot;段寄存器&quot;">​</a></h2><ul><li><p>CS：code segment——代码段</p></li><li><p>DS：data segment——数据段</p></li><li><p>SS：stack segment——栈段寄存器</p></li><li><p>ES：extra segment——附加段寄存器</p></li></ul>',47),h=[r];function o(n,d,s,p,c,u){return i(),e("div",null,h)}const f=a(l,[["render",o]]);export{_ as __pageData,f as default};
